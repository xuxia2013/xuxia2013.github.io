{"pages":[{"title":"","text":"前端链接 Uniapp教程 NodeJs教程","link":"/all/index.html"},{"title":"","text":"收藏小站 收藏夹 https://panjiachen.github.io/awesome-bookmarks/repository/https://zhaomenghuan.js.org/nav/ Software-Engineering-at-Google https://qiangmzsx.github.io/Software-Engineering-at-Google/#/?id=software-engineering-at-google web安全 https://websec.readthedocs.io/zh/latest/ 我在github上学习前端 https://github.com/EbookFoundation/free-programming-books/blob/main/books/free-programming-books-zh.md#javascript https://github.com/getify/You-Dont-Know-JS https://github.com/royeo/awesome-programming-books#javascript https://github.com/zhuyingda/front-end-collect https://github.com/exacity/deeplearningbook-chinese 播客中文播客榜 https://xyzrank.com/#/hot-podcasts","link":"/link/index.html"},{"title":"","text":"作者 热爱技术，兴趣广泛，并长期参与开源。 后端，Python / Node 前端，React / Vue / 小程序 / flutter / webpack / babel 目前在万达信息入职，如果你正在找工作，点此处 学的都是计算机,热爱互联网 好奇心很重，喜欢徒步 容易知足，爱撸猫 野生设计师 不单纯开发工程师 目前正在深挖自己感兴趣的东西，寻求第二职业 阅读 软件 微信读书 豆瓣评分 播客 软件 喜马拉雅 得到app 小宇宙 Apple Podcasts 配件 Airpods pro 在得到还不为人知的时候，我已经是资深用户了，在此之前，podcasts陪伴我很多年。在上班，在等地铁，在排队，在一个人在家做菜的时候，带上蓝牙耳机，仿佛一切与我隔绝。感受特别棒现在用的比较多的是得到和小宇宙。 我听得比较多的是这些： 喜马拉雅 齐俊杰看财经 牛油果烤面包 小宇宙 黑水公园 三五环 奇想驿 by 产品沉思录 无人知晓 忽左忽右 声东击西 macTalk 或者直接扫描下方： 如果你有好的播客内容，也欢迎在评论区留言。 联系我 Github: https://github.com/xuxia2013 博客地址：https://xuxia2013.github.io/ twitter: https://twitter.com/_nora_xu email: xuxia01@wondersgroup.com medium: https://medium.com/@_noraxu 豆瓣：https://www.douban.com/people/154085098/?_i=2434153F2-T280 微信公众号","link":"/about/index.html"}],"posts":[{"title":"30岁的人生总结","text":"从2014年7月份还没毕业就开始了第一个工作试用期的，找到了人生第一份工作薪资6000多，没什么机遇，纯粹是想快点找到一份工作，早点离开学校，在上海这个拥挤有活力的城市找到一份工作，很快就在上海租了一个不大的房子，有个超大的阳台和厨房，和两盆花草，一只小乌龟。在每天挤三次地铁的漕河泾上班。 试用期不到二个月的时候，就加入了公司的项目，刚开始因为有个”大神”庇佑，很快就入门了。Angular + bootstrap + gulp + git + sass 也是在慢慢研究中学习起来的。在很早的时候，就知道聪明的提问题，会比一般人学习要快很多，尤其是在前辈领导下，正确的提问题，会得到更好的答案。 再后来，做项目的时候，经常加班到晚上10点才回去，刚刚开始学东西的时候 还是很开心的，加班啥的不在乎，时间久了，吃不下饭，每天靠咖啡提神，晚上还是很兴奋睡不着；后来，又开始被经理折磨，不停的改需求的时候，开始懊恼为什么选这个专业·~ 慢慢的看到做的东西测试，上线，成就感，幸福感油然而生。 后来，去过创业公司，去过上市公司，很多学习资源来自网上，github、b站、油管或者某个国外/内的学习教程。都是白嫖来的知识。 也是去年，遇见了一个迷一样的男人，迅速闪婚，目前定居浙江。在一家上市公司做起了中层的技术管理工作，很多人问我，上海和浙江生活有什么区别，其实很多的： 生活，从996的内卷的工作氛围到拥有自己的生活，每天按时6点下班，周六日可以开车出门约会，赏花看音乐剧舞台剧，年轻的时候，不知道大家有没有写过很多人生清单，希望自己此生完成的一些梦想啥的，这些都是需要时间去做的，以前工作忙经常没有其他时间，然而现在都被我慢慢捡起来。 工作环境有很大不同，上海同事综合能力会更强，沟通和协作能力比较有优势。你的专业能力在上海比较吃香，在小公司就会比较看重你多个能力，哪里需要救火，哪里缺人，你就得补上去。 工资，上海薪资待遇更好，年假也更多，工作机会也更多，人生的可能性也更多。 每一种境遇带来不同的人生体验，生活和爱一直陪伴我们。","link":"/db2378ec1637/"},{"title":"Turbopack 将会是 Web 下一代的打包工具","text":"10月26日，Vercel 推出并开源了下一代打包工具：Turbopack。由 Webpack 的创建者 Tobias Koppers 和 Next.js 团队使用 Rust 编写出来的。 尝试一下在 Next 中尝试 Turbopack 的 Alpha 版本：next dev –turbo。 Turbopack 对服务器组件、TypeScript、JSX、CSS 等提供了开箱即用的支持。不过在 Alpha 版期间，许多功能尚不受支持。 Next.js 中的 Turbopack 目前仅支持&nbsp;next dev，可查看支持的功能。开发团队还在努力通过 Turbopack 添加&nbsp;next build&nbsp;支持。未来我们将发布独立的 CLI、插件 API，并支持其他框架，如 Svelte 和 Vue。 Turbopack有多快 Turbopack 建立在新的增量体系结构上，以获得最快的开发体验。在大型应用中，它展示出了 10 倍于 Vite 的速度，700 倍于 Webpack 的速度。在更大的应用中，差异更加巨大 —— 通常比 Vite 快 20 倍。 Turbopack 在开发环境只打包需要的最小资产，所以启动飞快。在一个 3000 个模块的应用里，Turbopack 只花了 1.8 秒启动，Vite 花了 11.4 秒。 为什么 Turbopack 这么快Turbopack 的架构吸取了 Turborepo 和 Google 的 Bazel 等工具的经验教训，两个工具都专注于使用缓存，永远不会重复相同的工作。 Turbopack 是建立在 Turbo 之上的，Turbo 是基于 Rust 的开源、增量记忆化框架。Turbo 可以缓存程序中任何函数的结果。当程序再次运行时，函数将不会重新运行，除非它的参数改变了。这种粒度的架构使您的程序能够在函数级别跳过大量工作。 增量响应式系统，又有 Rust 的速度加持？Turbopack 是不可阻挡的！ Turbo 的未来首先，Turbopack 将用于 Next.js 的开发服务器。它将为闪电般快速的 HMR 提供动力，并天然支持 React Server Component，Typescript，JSX，CSS 等也一样。 Turbopack 最终也会赋能 Next.js 的生产环境构建，无论是本地还是云端。我们会在你的整个团队里共享 Turbo 的缓存，用Vercel Remote Caching[4]。 Webpack 用户还可以期望未来可以增量迁移到 Rust-based 的 Turbopack 特性。 我们对 Turbo 生态系统的未来感到更加兴奋，我们推动它来帮助你更快速的迭代，在灵感到来时更好的创造。 延伸阅读 https://turbo.build/pack/docs/core-conceptshttps://juejin.cn/post/7158997985870200839","link":"/7263a2032826/"},{"title":"如何在uniapp快速实现一对一音视频通话应用","text":"需求：用户 A 和用户 B，通过摄像头，可以实现一对一、多对多的音视频互动直播。 其原理是进入同一个频道即可发布自己的音视频流并自动订阅其他用户的音视频流，进而实现音视频通话。我们采用 uniapp+第三方 anyRTC 集成。并且 anyRTC 提供每月免费赠送 1 万分钟实时音频、anyRTC 提供 rtm 服务。 如何集成 官网注册https://www.anyrtc.io/ 创建 anyRTC 账号 登录控制台，创建项目获取 appId 下载最新的 uniapp 开发软件：HBuilderX 前往插件市场下载：anyRTC音视频SDK插件 配置：打开 manifest.json 文件，选择 App 原生插件配置 =&gt; 远端插件 作自定义调试基座（采用云端插件或者本地） 真机模拟，开发 demo 展示 后台数据统计","link":"/0ec78993e7cf/"},{"title":"为什么说数字输入框是最最难用","text":"译文原文：https://stackoverflow.blog/2022/09/15/why-the-number-input-is-the-worst-input/译文作者：Jared Toporek 为什么不建议用 1234&lt;input type=\"number\" id=\"id_here\" value=\"sad\" /&gt;const numberInput = document.getElementById(\"id_here\");console.log(numberInput.value); // 打印出 \"\" https://codesandbox.io/s/funny-sky-tfjok3?file=/index.html 数字输入将允许用户输入无效的数字值，但实际上无法检索无效的值 所以，当我们用户输入后，只是提示用户输入无效，而不能精准告诉用户该怎么做，我们大多数人都会感到烦人，用户体验差多了，使用JavaScript进行此类验证绝对是必不可少的。 有效数字不仅包括数字（即，像字母e这样的科学符号） 如果数字输入值增加了足够大，则某些浏览器将自动将您的输入转换为指数符号。 最小/最大属性可以轻松绕过检验 增量/减少按钮将使数字值在这些范围参数内。但是，结果是超过也没有任何提示，还是输出了值 不同的浏览器接受不同的字符。 所有浏览器都不一样。让我们从最佳情况开始。 Chrome、 Microsoft Edge浏览器 允许下列字符 （0-9、小数点.、负值-、指数符号的字符“+”和“ e”） 这两个浏览器都将阻止您多次输入接受的非数字字符。但是，您可以将这些符号放在输入中的任何位置，例如将负符号放在数字之间，这会使数字无效 火狐浏览器 and Safari 没有任何限制。您可以输入任何想要的内容。 所有这些浏览器都会显示一个内置的弹出窗口，以表明输入的值不是有效的数字，并且如果没有用户固定这些输入值，则无法点击提交按钮。内置验证在视觉上与为应用程序构建时的UX设计稿不一致。作为程序员，您可能会发现这是可以接受的，但是设计师和/或产品经理很可能不会。 有没有替代方案呢在详细介绍何时使用数字输入之前，许多经验丰富的程序员知道的东西很重要：在处理数学相关的数字值时，即产品数量或人的年龄时，您才应使用数字输入。其他场景就不适宜了。 如果您要处理有条件的验证或该数字用于计算时，果断放弃数字输入吧。关于如何处理此问题有几个选择： 文章提到了一个可能的解决方案：使用&lt;input type =“ text” inputmode =“ numeric” pattern =“ [0-9]*”&gt;对于整数来说是一个不错的选择，但对于浮点而言不起作用十进制数字。 使用input type=\"text\"，会失去增量/减少按钮。但是，权衡之下，确实是最佳的选择。 这里得到的收获就是不可能提供许多项目要求的同时使用数字输入的复杂功能。这是一个/或选择，而我看到的方式，最好放弃数字输入。","link":"/89b31747257f/"},{"title":"uniapp大项目如何瘦身","text":"前一段时间，接到一个任务，uniapp移动端的应用要在微信小程序上线，看看我们在商店上架的apk应用包30M，这个项目是基于uniapp, uview-ui v1.8.4搭建的。要知道，微信小程序的要求很多的，后来，一周后，项目顺利上线，那我是怎么做的呢？ 微信官方要求 整个小程序所有分包大小不超过 20M 单个分包/主包大小不能超过 2M 用户隐私协议提交 —— 使用了获取用户信息的需要提交，比如获取定位，获取摄像头等 添加配置 pages.json 1234567891011121314151617181920\"mp-weixin\" : { \"appid\" : \"wx01a0a0b420ef4c14\", \"setting\" : { \"urlCheck\" : false, \"es6\" : true, \"minified\" : true // 重要 }, \"optimization\" : { \"subPackages\" : true // 重要 }, \"usingComponents\" : true, // 重要 \"uniStatistics\" : { \"enable\" : false }, \"permission\" : { \"scope.userLocation\" : { \"desc\" : \"您的位置将用于绑定您的区域\" } } } package.json 打包命令后添加 –minimize推荐使用 yarn dev:mp-weixin 开发者工具配置 分包处理其实就是把pages里对应的文件夹，拆分到同级文件夹去 https://uniapp.dcloud.io/collocation/pages.html#subpackages 引入包 统一使用@，因为有分包的页面，路径已经变了 12import api from \"@/api/index.js\";import { getDictionary } from \"@/common/util.js\"; 删掉项目多余插件，资源，不使用体积大的插件 比如axios，使用自带的uni.request 去掉 vue-signature-pad 素材压缩 方法1：使用图片压缩工具https://tinify.cn/，压缩图片 方法2：可以放到线上的图片尽量放在线上，使用cdn或者放在固定服务器上，最好和域名服务器同域名 开发中注意事项使用单位rpx 12345678text { width: 60rpx; height: 34rpx; line-height: 34rpx; font-size: 20rpx; border-radius: 6rpx; margin-left: 30rpx;} 使用弹性布局 推荐阅读文章：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html demo: https://codepen.io/enxaneta/pen/adLPwv 减少使用、不使用内联样式，推荐使用class来写减少使用uview的u-row, u-col， 推荐使用弹性布局，代码少，嵌套少navbar 怎么写 首选方案：在使用page.json配置 次方案：自定义，但不要自定义高度和字体大小，会不协调 降低代码量 uview-ui库能满足需求的尽量多使用，不要自己重新写css 页面组件能复用就复用，页面也是如此 新建/编辑/详情应该是同一套代码。页面元素一样的话，一个页面来写的话，后续补充也是比较轻便 页面跳转 encodeURIComponent url比较长有空格有特殊字符可以使用 decodeURIComponent 不写会在小程序中报错，h5、Android不报错 1234567891011 // 跳转页面 uni.navigateTo({ url: \"/nursing/orderDetail?kh05=\" + encodeURIComponent(JSON.stringify(e)) }); // 跳转后页面接收参数onLoad: function (option) { //option为object类型，会序列化上个页面传递的参数 this.kh05 = JSON.parse(decodeURIComponent(option.kh05)); //打印出上个页面传递的参数。 }, 小程序开发者工具会编译报错 一片红的时候，不要慌，检查下你的page.json不能出现多余的逗号和注释","link":"/d42c9c2416a4/"},{"title":"优势谈判","text":"作者：罗杰•道森 (Roger Dawson) 豆瓣地址 读后感这是一本值得反复去读的书，第一次读就会发觉书里所说的道理在很多场合都适用，比如蚕食政策、服务贬值、避免敌对情绪，”谈判高手让买主觉得他赢了,拙劣的谈判手让买家觉得他输了“这些真是第一次听说，真是受用。 虔敬力价值观念坚定的人都有这种力量强调一个原则：你可以相信我，因为我有一套价值观，我不会背离这些价值观。 个人魅力专业力量 谈判高手尤其要注意下面四种重要的力量。四种力量结合其作用是巨大的。当这四种力量集合在一个人身上的时候，结果是让人难以置信的 1.合法权力：头衔的力量。 2.报偿力：报偿别人的力量。 3.虔敬力：坚定的价值观。 4.个人魅力：人格，表现出来的精神气质。 谈判高手知道如何让人们改变他们的立场，使他们能集中考虑共同的利益问题。要达到这个目的，就要熟悉你买主的不同个性，了解他们处理问题的不同方法。尽管他们的立场可能与你完全不同，要努力改变他们的立场，让他们把关注的焦点放在双方的共同利益之上。 谈判双赢的第二个关键是：不要认为他们想要的就是你想要的。如果你这么猜想，那么你就会认为你在谈判中所做的对他们有利的事情，就是对你有害的事情","link":"/56a3054d9167/"},{"title":"动物农场","text":"作者：乔治•奥威尔[英] 豆瓣地址 这是一本很有意思的书。全书都是在地铁里，医院等位的时候看完的，很短的一本书，却是我今年最迫不及待看完的小说，读的时候心情澎湃，读完意犹未尽。读完的时候，简直不肯相信已经结束了，不停的翻看全书，是不是遗漏的什么~~ hhh 书中，动物们齐心合力赶走了琼斯，梦想创建一个和谐美好的没有压迫的社会，可是事情渐渐的变化了。大败琼斯，小狗的出现，手拳击手的死去，风车的成功，拿破仑的领导，心情也随着起起伏伏。最爱书中最末一句： 外面的众生灵从猪看到人，又从人看到猪，再从猪看到人；但他们已分不出谁是猪，谁是人了。 讽刺之极。如同我们。悲惨如此。","link":"/a5467de46cfc/"},{"title":"uniapp如何实现消息推送","text":"推送消息是app应用中非常重要的一个功能，尤其对于营销推广而言，没有什么途径比消息推送更能直接、即时地触及到目标用户群体。 推送消息的主要作用为： 1.活跃用户：促进用户活跃，提高用户粘性，带动app内模块的使用，新功能的尝试，留住用户2.用户召回：将合适的内容通过合适的渠道在合适的时间推送给合适的用户用户召回，提高留存，每天推送精准的信息（不多于2条为佳），而不是轰炸用户，达到最终效果=推送人群 * 推送成功率* 触达率 * 点击率 * 用户与内容匹配度。3.信息分发：信息告知和提醒，平台关于功能更新/内容更新/活动消息的发布可以来推送 如果你的公司也是用uniapp，那就继续看下去吧。 如果时间不够，用unipush，官方支持，免费使用，也是集成比较专业的个推公司服务我们采用的是极光，覆盖的平台多。需要自己看些文档来开发了，提供代码demo上手也容易的unipush和极光都支持，需要app在线推送，消息推送后，app离线的话，会保留一段时间，等待用户登录再行通知。 如果项目需要离线通知就比较麻烦了，为什么？ 由于手机厂商众多，他们各自都有不同的推送服务，包括Apple、google（仅能在海外使用）、华为、小米、oppo、vivo、魅族，以及还有一些没有专业推送服务的中小手机品牌。他们对App后台耗电都有查杀机制，除了微信等大应用，普通应用很难常驻后台。——来自uniapp文档 需要集成各个厂商通道的 SDK，部分厂商还要求必须上架应用市场才可以正常使用推送服务。详细如下： 你要收集七颗龙珠才可以召唤神龙，听听就很麻烦，这个也不是不能做，下一期我们单独说。 unipush推送 unipush介绍文档 UniPush开通指南 UniPush使用指南 极光推送极光注册 极光官网注册 登录极光后台 - 应用管理 - 创建极光应用 获得Appkey 免费插件 极光JCore官方SDK 极光JPush官方SDK 选择【购买for云打包】 项目配置 包名获取 点击发行-云打包查看 在hbuildx项目中配置 推送消息可以在极光平台上定制、配置推送=&gt;推送管理=&gt;创建推送=&gt;填表 uniapp 应用中加入代码在应用启动的时候，需要初始化以及监听极光消息推送 app.vue 1234567891011121314151617181920212223242526var jpushModule = uni.requireNativePlugin(\"JG-JPush\");jyJPush.android_init(res =&gt; { //初始化成功成功之后再设置别名 //官网的话：init后直接set操作有极大可能导致失败，可能会在回调里拿到6022,6002等，测试的时候可以做个7、8秒的延时，正式业务里一般配合用户注册使用，延时基本上够用 //实际上：我设置成10s才管用 setTimeout(() =&gt; { console.log('setAlias'); this.setAlias() }, 1000 * 10) //20秒后再设置别名 uni.showToast({ icon: 'none', title: JSON.stringify(res) })})//设置别名jyJPush.setJYJPushAlias({ userAlias: 'chxxtAlias'},result =&gt; { console.log('setJYJPushAlias', JSON.stringify(result)); uni.showToast({ icon: 'none', title: JSON.stringify(result) })}); 测试推送消息首先需要运行到手机上进行测试，这里使用真机进行测试，需要先制作一个自定义基座。 在 HbuilderX 点击 运行-运行到手机或模拟器-制作自定义调试基座，确认弹出窗口的信息后，点击打包。 等待打包结束后，在 HbuilderX 顶部点击运行-运行到手机或模拟器-运行基座选择，选择自定义调试基座。然后再点击运行到 Android App 基座，选择你的设备进行运行。 其他阅读 厂商通道参数申请指南 厂商推送应用创建配置流程 unipush 极光官网demo","link":"/e7307e5a7a5e/"},{"title":"史上最佳工具之Git客户端Fork","text":"Fork绝对是目前功能和交互最优秀的全功能的Git客户端，不仅有免费版，颜值超高，还具备非常多实用的功能，整体易用性已经达到很高的程度，下面就列举一些。 克隆项目在github上的项目clone一份到自己电脑上 查看克隆进度 查看项目中issues和Pull requests 去提一个issues 暂存工作区 添加 查看 文件树-查看Commit下所在分支的项目的全部文件 查看某个文件所有的变更历史右击-history 自带快速便捷的工具处理代码冲突 Cherry-pick单独挑出Commit，去提交到别的业务线 查看变更 进行差异展示 搜索提交记录 集中管理多个git账户 切换主题-暗黑模式 项目提交和贡献者的统计","link":"/cf63269fcdc6/"},{"title":"在家就可以实现环游世界的愿望","text":"十一出游的人那么多，人头攒动，有没有和我一样，因为口罩，没有出门，不敢出门的小伙伴？ 下面给大家罗列了几个网站，让你实现躺着就能欣赏远方的风景、世界各地的文化遗产、城市风光、人气景点，足不出户就能在家实现环游世界哦！ https://zh-cam.com/ https://www.skylinewebcams.com/ https://worldcam.eu/ https://www.worldlivecamera.com/en/webcam/The-Deck-Sydney.html https://livechina.cctv.com/zhibo/index.shtml?spm=C04362.PWdejIOEISE0.EVbEpxjQVGbO.2","link":"/41212b74ab17/"},{"title":"如何同步并管理我的文章","text":"为什么要搭建技术博客前几日在平台看到这个文章中文互联网的产出在渐渐枯萎吗？，深有感触，知乎这个平台的出现，早期的时候沉淀了许多优质的用户和文章，后来商业化后渐渐的对我没有吸引力了。我不知道多少人喜欢微信公众号，反正我很是讨厌，太封闭，限制太多，发布后就不让修改，也不让添加外链，不能RSS，也无法在网站搜索文章等等。自问也没有能力改变这个营销号漫天飞的环境，很喜欢电影《无问西东》中台词： 世俗这样强大，强大到生不出改变它们的念头来。可是无论外界的社会如何跌宕起伏，都对自己真诚，坚守原则。内心没有了杂念和疑问，才能勇往直前。这个世界缺的不是完美的人，而是从心底给出的真心，正义，无畏与同情。不要放弃，对自己的思索，对自己的真实。 做自己认为有价值的事情，一直坚持去做。这就是我的理由。 写文章是痛苦的，通常一周也就2篇文章的输出，每次花费5个多小时，写完还要审查下有没有错别字，配图是不是合理，文章通常改了又改，后续补充又补充。为了逼自己输出内容，不得不去看东西学新东西，读书、看源码、听播客，然后把自己遇到的、自己处理的解决方案写下来，通常还要把环境再重装一次，项目再重新创建一次，折腾来折腾去。 在完成主业的同时，研究着些小项目、开源项目等等，以前写进代办事项落灰的清单也在慢慢被清除，目前看下收获也算颇丰了，除了能力的提升，还有精神上满足感，不再焦虑，生活质量也提高不少。 我是如何管理博客的和很多技术人员一样，我酷爱使用软件vscode来编辑md,步骤点此：如何零成本搭建一个博客，然后通过自己用js写的脚本手动更新并同步到各个平台。 1\"publish\": \"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; node async.js\" 如果你不是技术人员，你可以使用下面这个同步工具 同步工具微信公众号同步助手 在官网下载安装包，安装插件后，在网页右击-提取文章并同步 如果没有登录，可以直接去网站登录，后面再次点击同步就出现这个网站图标了，操作起来还是很顺畅的。 但是同步后只是到草稿，还不是正式发布，需要手动，感兴趣去官网看看吧。 目前已经支持：20多个平台 免费图床写文章最怕什么，微信公众号封面要配图，文章首页要配图，内容排版要加图吸引用户。俗话说一图胜千言，但是找图实在是累死人的活儿，下面推荐几种免费可商用的网站。 笑果图床 支持外链，无限空间，无限流量, 无需登录即可上传，最大支持10M的图片 Pexels 是一家国外的免费高清图片网站。适合寻找风景图和各类职场、商业场景大图。 Unsplash 想寻找一些高质量的高逼格的图片，不妨到这个网站来试试。 聚合图床 笑果图床是我一直在用的，不得不说页面不是很好看，但是服务一直稳定，也就没替换了。 一般配合Pexels和unsplash在一起用，数量上不如Pixabay，但是质量很高。 你可以：在电脑上写完文章后，把配图一次性上传到笑果图床，在网站上把生成的html页面再粘贴到公众号，无需再一个个上传到微信公众号了，很是方便。 技术人爱逛的网站 优质独立博客 中文独立博客列表 https://github.com/timqian/chinese-independent-blogs 优秀的技术网站 Hacker News v2ex medium 博客园 有哪些值得邮件订阅的网站 Hacker News JavaScript Weekly 每周一封，关于JavaScript的新闻和文章 Frontend Focus 最佳前端新闻，文章和教程的周刊综述。HTML，CSS，WebGL，画布，浏览器技术等。 Node Weekly 免费的，每周一次的免费电子邮件汇总。 ES.next News 最新的ES知识推送 React Status React UX Design Weekly 每周最佳用户体验设计 Daily UI cssweekly CSS每周一次 InfoQ 每周精要 Medium Digest 如果你也想搭建一个网站：如何零成本搭建一个博客，不妨看下此文。 原文：https://xuxia2013.github.io/%E5%A6%82%E4%BD%95%E5%90%8C%E6%AD%A5%E5%B9%B6%E7%AE%A1%E7%90%86%E6%88%91%E7%9A%84%E6%96%87%E7%AB%A0/","link":"/464d957066f2/"},{"title":"如何零成本搭建一个博客","text":"介绍怎么搭建一个网站，如何发布，如何同步到其他平台，如何管理我的文章。 挑选一个喜欢的主题先去网站 https://hexo.io/themes/ 逛逛，应该会花费不少时间。一个美美的网站才是源动力吖。 我选了这款：很有质感，简约而有内涵。 https://github.com/ppoffice/hexo-theme-minos Github账户GitHub作为最大的全球交友网站，人手必备一个。 创建一个库 https://github.com/new 此处必须一直，如果你账户是张三，也必须输入张三 安装hexo npm install -g hexo-cli hexo init [yourBlogName] cd [yourBlogName] &amp;&amp; npm install 安装主题 git clone https://github.com/ppoffice/hexo-theme-minos.git themes/minos 本地搭建 hexo s 浏览器打开网页：http://localhost:4000 部署 连接github: _config.yml 1234deploy: type: 'git' repo: https://github.com/[yourBlogName]/[yourBlogName].github.io.git branch: 'main' hexo clean 清理缓存 hexo g 生成页面 hexo d 部署 初始化完成 快快打开 [yourBlogName].github.io.git欣赏下吧。。 写文章 写一篇文章 hexo new post \"article title\" 写一篇草稿 hexo new draft \"article title\" 发布文章 hexo p \"article title\" 添加评论 申请LeanCloud账号并创建应用 进入该应用的 设置-&gt;应用凭证，找到 AppID 和 AppKey，记录下来后面配置要用 themes\\_config.yml下配置 123456789101112# # Comment plugin settings.comment: type: valine app_id: [appid] # (required) LeanCloud application id app_key: [appkey] # (required) LeanCloud application key notify: false # (optional) receive email notification verify: false # (optional) show verification code placeholder: # (optional) comment box placeholder text avatar: hide pageSize: 10 # pagination size visitor: true 百度统计访问量 登录百度统计， 定位到站点的代码获取页面 编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id 12345678910// `themes\\_config.yml`下配置plugins: mathjax: true katex: false gallery: true clipboard: true google-analytics: tracking_id: baidu-analytics: tracking_id: // [复制 hm.js? 后面那串统计脚本 id] 添加打赏 写一个插件donate.ejs 放在页尾 123456789101112&lt;% if (!index &amp;&amp; has_config('donate') &amp;&amp; get_config('donate') === true&amp;&amp; url_for(page.path) !== '/about/index.html' ) { %&gt; &lt;div id=\"donate\" style=\"text-align:center; margin-top: 60px;\"&gt; &lt;%- get_config('donate_message') %&gt; &lt;br/&gt; &lt;img src=\"&lt;%- url_for(get_config('donate_wx_img')) %&gt;\" alt=\"\" style=\"margin-right: 40px;\"&gt; &lt;img src=\"&lt;%- url_for(get_config('focus_wx_img')) %&gt;\" alt=\"\" &gt; &lt;/div&gt;&lt;% } %&gt; 在配置文件中配置 123456#是否开启打赏donate: true#打赏文案donate_message: 欣赏此文？求鼓励，求支持！donate_wx_img: 打赏微信图片地址focus_wx_img: 关注公众号图片地址 知识版权https://creativecommons.org/licenses/by-nc-sa/4.0/配置在网站最底部。 原文：https://xuxia2013.github.io/%E5%A6%82%E4%BD%95%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/ 添加域名可以在Github对应repository的Setting里，找到Github Pages， 在Custom domain里填进去自己的域名，保存。你会发现在repository里，会多出一个名为CNAME的文件，内容是自己的自定义域名的网址。在Hexo目录里的source文件夹下面，新建一个同样内容、同样名字的CNAME文件即可。 不然你每次Hexo推送GitHub Pages时，会遇到自定义域名失效问题","link":"/853e3c088dac/"},{"title":"微信开发-eggjs后台上传素材","text":"最近在研究微信开发，做了一个平台，但是上传素材至微信服务器频频出现问题，各种尝试后，最终解决了，特此记录下。 话不多说上代码： 前端代码前端采用 element-ui/el-upload 123456789101112131415161718192021222324252627&lt;el-upload action=\"/dev-api/upload\" :file-list=\"form.thumb\" name=\"media\" list-type=\"picture-card\" :auto-upload=\"true\" :headers=\"headerObj\" :on-change=\"handleChange\"&gt; &lt;i slot=\"default\" class=\"el-icon-plus\" /&gt; &lt;div slot=\"file\" slot-scope=\"{ file }\" class=\"thumb-img\" :style=\"'background-image: url(' + file.url + ')'\" &gt; &lt;span class=\"el-upload-list__item-actions\"&gt; &lt;span class=\"el-upload-list__item-delete\" @click=\"handleRemove(file)\" &gt; &lt;i class=\"el-icon-delete\" /&gt; &lt;/span&gt; &lt;/span&gt; &lt;/div&gt;&lt;/el-upload&gt; 效果： 后台代码后端采用egg.js config/config.default.js 12345678910multipart: { mode: 'file', fileExtensions: [ '.jpg', '.jpeg', '.png' ], }, security: { csrf: { // 判断是否需要 ignore 的方法，请求上下文 context 作为第一个参数 ignore: ctx =&gt; isInnerIp(ctx.ip), }, }, controller/upload.js 1234567891011121314151617181920212223242526// UploadController方法// 引入库const formstream = require('formstream');// 获取tokenconst access_token = await service.weixin.token(settingOne);// 文件处理const file = ctx.request.files[0];const imgbase64 = await fs.readFileSync(file.filepath, 'base64');const dataBuffer = Buffer.from(imgbase64, 'base64');const form = formstream();form.buffer('media', dataBuffer, file.filename, file.mime);// 上传至微信服务器 - 新增永久素材const { data: result } = await ctx.curl(`https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=${access_token}&amp;type=image`, { method: 'post', headers: form.headers(), stream: form, dataType: 'json',});if (result.errcode) return ctx.helper.error(ctx, 500, result); ctx.helper.success(ctx, null, '上传成功'); 大功告成！撒花💖","link":"/a692a0d2707e/"},{"title":"无问西东","text":"世俗这样强大，强大到生不出改变它们的念头来。可是无论外界的社会如何跌宕起伏，都对自己真诚，坚守原则。内心没有了杂念和疑问，才能勇往直前。 这个世界缺的不是完美的人，而是从心底给出的真心，正义，无畏与同情。什么是真实，做什么和谁在一起，你看到什么听到什么，有一种从心灵深处满溢出来的不懊悔也不羞耻的平和与喜悦。 看到和听到的，经常令你们沮丧，世俗是这样强大，强大到生不出改变它们的念头。可是如果有机会提前了解了你们的人生，知道青春也不过只有这些日子，不知你们是否还会在意的事情，比如占有多少，才更荣耀，拥有什么，才能被爱。 等你们长大，你们因绿芽冒出土地而喜悦，会对出生的朝阳欢呼雀跃，也会给别人善意和温暖，但是却会在赞美别的生命的同时，常常，甚至永远忘了自己的珍贵。 愿你在被打击的时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵，爱你所爱，行你所行，听从你心，无问西东。 不要放弃，对自己的思索，对自己的真实。","link":"/e8e45e38c7b4/"},{"title":"搭建组件私有仓库","text":"Git仓库当私有npm我们通常通过 npm 来安装和使用开源的库。但是，通常我们有些私有的模块，更新不频繁，不想通过npm发布，但是又想在多个项目中使用，同时我们不想将组件库复制到各个项目中来使用。而且一旦公有模块更新，我们也不能及时更新。 利用现有的git，既不用搭建私有的npm私有仓库，又能满足上面的需求，它做为一个快速解决方案, 后期是可以慢慢过渡升级到使用完整 npm 私有仓库项目地址：http://[ip]/wonders-ui 私有组件库搭建安装1\"@wonders-ui/mobile\": \"git+http://[ip]/wonders-ui/mobile.git\" 使用1234import Vue from 'vue'import wondersUI from '@wonders-ui/mobile'Vue.use(wondersUI) 注意不好的地方是，使用 npm update / yarn 是无法更新这个@wonders-ui/mobile”，想更新只能重新安装一次，或者使用下面命令。 1yarn add git+http://[ip]:[password]@[ip]/wonders-ui/mobile.git 管理组件库@wonders-ui/web使用storybook来管理组件库 简述 可以帮助构建 UI 组件，组合组件，说明文档，测试和部署 UI 组件的工具，与业务功能隔离开来，专注于开发组件。 支持框架 React，Vue等 提供丰富的插件供开发使用，比如docs可以生产组件参数说明（参数描述，参数定义，支持的类型等）， knobs 帮助您在隔离构建UI组件时 可以动态地修改组件的参数来验证交互; notes可以展示你的md文档； addon-storysource可以直接在页面看到你的源码；一键生成所有截图的Storybook Chrome Screenshot Addon。这些社区的addons都非常实用。感兴趣可以自己增加 支持模拟不同设备下的组件 jest自动化测试组件还有依靠视觉,快照和视觉回归测试 灵活度很高，如果想使用js/ts，css,/scss/styled-components, redux 都是可以的，在其他组件库基础上进行二次开发，需要自行配置项目 运行 git clone yarn yarn storybook","link":"/19ad579dc527/"},{"title":"浅谈uniapp","text":"我们团队使用uniapp + uview 开发了10个小项目，业务相对不复杂，实现了普通的客户终端业务，比如代办列表，新闻资讯，个人app业务管理，人脸识别，在线直播通话等。 也许大家都没有接触过这个跨平台的前端框架。先简单介绍下。 官方文档说，uni-app在开发者数量、案例、跨端抹平度、扩展灵活性、性能体验、周边生态、学习成本、开发成本等8大关键指标上拥有更强的优势。 开发者和案例更多：HBuilder装机量800万台，开发者社区月活百万，70多个QQ微信群承载10万人。案例众多，uni统计月活超10亿（点击） 性能更高（见评测） 更丰富的周边生态，插件市场数千款插件 提供比小程序原生开发更好的开发体验、更高的工程化效率 跨端抹平度更完善，且各端特色发挥更灵活，可真正实现一套代码6. 多端覆盖，无需各端多头维护升级 权威认可：阿里小程序官方工具内置uni-app（点击）、腾讯课堂官方自制uni-app培训视频（详见） 我的感受是，如果你团队资源有限，没有细致化的需求，有一个前端就能搞，成本低，上手很快，效果快。如果你的老板想法很多，客户需要一个程序员就能搞定开发的，如果你的产品说，搞app比较来钱，选这个就对了。 来点正经的哈 编辑器难用，跟vscode资深用户说换编辑器本身就是要命的，更何况官配的HBuilderX，设置主题啥，字体啥难看死掉，时常崩溃没响应，只能退出去重新打开。 打包一天就7次，可以付费打包（一个包2元，骗我钱 uniCloud最好别用，限制多，（个人崇尚开源免费 踩到坑了，社区很少会回复你的，插件市场很多插件没错，但是大部分是个人app开发，回复和修复问题的速度你懂的，大家都是有工作有生活的。然后你的开发进度就卡在那儿了，坑只能自己含着泪给填了…… 总而言之，不停的探索，总有意想不到的收获。","link":"/11ea0d754414/"},{"title":"深入学习flutter(零)","text":"前几日，看到某公众号给我安利用flutter来做游戏，Flutter 3.0 新出了对游戏很友好，流畅度极高，与原生效果相差无几。同时还有对广告、应用内购买和游戏中心等服务的预构建集成，想起几年前就对flutter有所耳闻，一直也没有时间来学习，现下正合适。你问为什么对游戏感兴趣？因为上一家公司就是跟游戏相关，就是说特别能赚钱吧。 学习新东西总是痛苦的，总是要逼自己去学习，不然脑子渐渐就不好使了。希望对你有帮助。 安装1git clone https://github.com/flutter/flutter.git -b stable 配置环境变量12PUB_HOSTED_URL=https://pub.flutter-io.cnFLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn 安装vscode安装flutter dart 测试是否安装成功1flutter doctor 新建项目ctrl + shrft + p 启动任务栏，输入flutter, 选择新建项目即可。 成功了~ 其他阅读 Flutter 3.3发布，带来新的预览版渲染引擎 初探Flutter跨端游戏开发 学习资料Flutter中文网https://flutterchina.club Flutter实战https://book.flutterchina.club Flutter社区http://www.flutter-io.cn Flutter每周Widgethttps://www.youtube.com/playlist?list=PLjxrf2q8roU23XGwz3Km7sQZFTdB996iG 资源整合https://www.jianshu.com/p/f5a4a28e2888","link":"/185bfbae2328/"},{"title":"用uniapp开发一个新闻小程序","text":"目前市面上各种「跨平台」开发解决方案层出不穷，比较有代表性的就是： UniApp、Flutter、 React Native、Taro、Weex等等。UniAPP 是基于「 Vue + 微信小程序 」语言体系，开发人员学习成本低上手快，对于是很多中小型企业，因为短小快，省去很多人工成本，也不失为最佳的选择。很多政企项目也开始使用了：案例 此前，本人是博客园的深度用户，也苦于没有安卓小应用，做了一个小程序。每天刷刷看文章。使用了官方开发接口，没有后端和数据库，0成本做了一个使用频繁的微信小程序，感兴趣就往下看吧 成果 准备 cnblogs API KEY 申请：https://oauth.cnblogs.com/ 注册一个微信小程序 地址 api接口文档：https://api.cnblogs.com/help 开发工具 微信开发者工具 [uniapp官方编辑器](https://www.dcloud.io/hbuilderx.html) 学习路线没有接触过 Vue.js，有 html、css、JavaScript 的基础也可以如果你有过h5、原生小程序、mpvue等的开发经验，也可以无缝衔接到 uni-app，几乎没有额外的学习成本 大体了解Vue.js 语法 学习创建运行 uni-app 项目：了解 uni-app 组件、路由等知识，开发过程中需要注意的是uni-app中对vue语法的兼容性 学会使用官方工具 HBuilder 自己开发个小功能看看效果 根据项目情况，继续补充 ES6、NPM 等知识 项目打包并上线到各平台 创建项目在点击工具栏里的文件 -&gt; 新建 -&gt; 项目：输入项目名称，项目地址 创建完成后目录结构如下 添加uni-ui打开连接；https://ext.dcloud.net.cn/plugin?id=55 点击导入插件： 出现uni_modules文件夹： 配置登录微信小程序后台 开发者-开发管理-开发者ID (AppID 小程序ID、AppSecret小程序密钥 ) 小程序代码上传-IP白名单添加本地ip 服务器域名-request合法域名: https://account.cnblogs.comhttps://api.cnblogs.com token1234567891011121314151617181920212223242526272829303132333435363738394041424344async function getToken() { const token = await requestFn({ url: '/token', method: 'POST', data: { client_id: '', client_secret: '', grant_type: 'client_credentials' }, header: { 'content-type': 'application/x-www-form-urlencoded' } }) uni.setStorageSync('token', token.access_token); uni.setStorageSync('expires_in', token.expires_in); uni.setStorageSync('expires_in_start', moment().valueOf());}const baseUrl = 'https://api.cnblogs.com';async function requestFn(options) { return await uni.request({ ...options, url: baseUrl + options.url, header: { ...{ 'Authorization': `Bearer ${uni.getStorageSync('token')}` }, ...options.header }, }).then(res =&gt; { // console.log(res, 'res') const data = res[1] if (data.statusCode == 200) { return data.data } uni.showToast({ title: data.data.title, icon: 'none', duration: 4000 }); return data.data })} page.json 1234567891011121314151617181920212223242526272829303132333435{ \"pages\": [ { \"path\": \"pages/index/home\", \"style\": { \"navigationBarTitleText\": \"代码改变世界\" } }, { \"path\": \"pages/index/details\", \"style\": { \"navigationBarTitleText\": \"博文\" } }, { \"path\": \"pages/index/author\", \"style\": { \"navigationBarTitleText\": \"\" } }, { \"path\": \"pages/index/search\", \"style\": { \"navigationBarTitleText\": \"找找看\" } } ], \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"uni-app\", \"navigationBarBackgroundColor\": \"#F8F8F8\", \"backgroundColor\": \"#F8F8F8\", \"onReachBottomDistance\": 200 }} 首页12345678910111213141516171819202122&lt;template&gt; &lt;view class=\"tabs\"&gt; &lt;scroll-view id=\"tab-bar\" class=\"scroll-h\" :scroll-x=\"true\" :show-scrollbar=\"false\" :scroll-into-view=\"scrollInto\"&gt; &lt;view v-for=\"(tab, index) in tabBars\" :key=\"tab.id\" class=\"uni-tab-item\" :id=\"tab.id\" :data-current=\"index\" @click=\"ontabtap\"&gt; &lt;text class=\"uni-tab-item-title\" :class=\"tabIndex == index ? 'uni-tab-item-title-active' : ''\"&gt;{{ tab.name }}&lt;/text&gt; &lt;/view&gt; &lt;/scroll-view&gt; &lt;view class=\"line-h\"&gt;&lt;/view&gt; &lt;swiper :current=\"tabIndex\" class=\"swiper-box\" style=\"flex: 1;\" :duration=\"300\" @change=\"ontabchange\"&gt; &lt;swiper-item class=\"swiper-item\" v-for=\"(tab, index1) in newsList\" :key=\"index1\"&gt; &lt;scroll-view class=\"scroll-v list\" @scroll=\"scroll\" enableBackToTop=\"true\" :scroll-top=\"120\" scroll-y @scrolltolower=\"loadMore(index1)\"&gt; &lt;uni-search-bar v-if=\"isShowSearch\" @confirm=\"search\" v-model=\"keyword\"&gt;&lt;/uni-search-bar&gt; &lt;media-item :listData=\"tab.data\" /&gt; &lt;view class=\"loading-more\" v-if=\"tab.isLoading || tab.data.length &gt; 4\"&gt; &lt;text class=\"loading-more-text\"&gt;{{ tab.loadingText }}&lt;/text&gt; &lt;/view&gt; &lt;/scroll-view&gt; &lt;/swiper-item&gt; &lt;/swiper&gt; &lt;/view&gt;&lt;/template&gt; 点赞收藏转发代码123456789101112131415161718192021onShareAppMessage() { return { title: '代码改变世界', path: '/pages/index/home', imageUrl: '../../static/logo.png' };},onShareTimeline() { return { title: '代码改变世界', path: '/pages/index/home', imageUrl: '../../static/logo.png' };},onAddToFavorites() { return { title: '代码改变世界', path: '/pages/index/home', imageUrl: '../../static/logo.png' };}, 运行项目微信小程序运行：进入项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 选择微信开发者工具。 运行后，目录会多一个，这里就是各端编译后的文件：unpackage\\dist\\dev\\mp-weixin 注意：需要打开微信开发工具，然后 设置 -&gt; 安全 -&gt; 服务端口 -&gt; 开启。否则连接接不上。 预览 上传代码通过微信开发者工具发布-审核通过后-后台点击上线 读完全文的你不会找不到源码","link":"/2499ca70b77f/"},{"title":"老项目vue2+webpack3项目升级教程","text":"去年接手了公司一个项目，前一段时间，收到产品反馈说线上打开菜单非常的慢，点了几个列表页，网站就卡死了，再点击就没有反应了。用的 vue2.6.10 + webpack3 + element-ui2.15.7 项目很大，业务代码中使用了很多体积比较大的库，还有封装了大量的组件。 本地构建花费了 5 分钟，打包完 dist 文件有 16M 这么大，首屏加载大概有 7-8s，打开项目线上地址，我进去一看点了几个页面，果然出现产品和用户反馈的一样，卡顿明显，没几分钟，整个网站卡住了，刷新也还是卡。 那就开始整吧。 如何排查问题 使用 chrome 的开发者工具(打开网站，按 F12) 如何使用可看官网文档，这里不赘述了 https://developer.chrome.com/docs/devtools/evaluate-performance/ Performance Lighthouse Network 勾选 Preverse Log 保留日志，勾选 Disable Cache 屏蔽浏览器的接口缓存机制，No throtting 选择器 slow3G 可以对当前网络状态进行检测，查看接口的响应体积和顺序 npm run preview – –report 来分析 webpack 打包之后的各个静态资源的大小。你可以发现占用空间最多的是第三方依赖，前提是安装了包 webpack-bundle-analyzer 接口慢 因为这部分需要后端同事协助，所以在我发现存在一部分接口没有分页，前端数据量很大，记录下接口地址，然后开会和后端负责人讨论改造工作。（工作需要及时的安排和协调，让前后端同事工作并行，效率会比较高。 经接口调整后，接口整个速度都更上去了,页面卡顿有所缓解 减少 HTTP 请求升级 webpack 之前的项目结构 123yarn upgrade webpack@5.37.0yarn add webpack-dev-server webpack-cli -Dnpm-check-updates 一键升级所需的组件 由于各种考虑 vue 和 element-ui 没有升级 123456789// package.json\"scripts\": { - \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\", + \"dev\": \"npx webpack serve --config build/webpack.dev.conf.js --color --progress\", \"start\": \"npm run dev\", \"build\": \"node --max_old_space_size=2048 build/build.js\"}, webpack.base.conf.js 12- const merge = require('webpack-merge')+ const { merge } = require('webpack-merge') 新增 mode 选项 123module.exports = { + mode: process.env.NODE_ENV,} 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117+ const VueLoaderPlugin = require('vue-loader/lib/plugin');... cacheGroups 对 chunks 的拆分起着关键的作用。可以通过 cacheGroups 来定制 chunks 拆分策略, 由于我们项目中存在很多插件，我们这里都把它单独拆分出来，配合cdn使用optimization: { splitChunks: { chunks: 'all', cacheGroups: { elementUI: { name: \"chunk-elementUI\", priority: 20, test: /[\\\\/]node_modules[\\\\/]element-ui[\\\\/]/ }, wangeditor: { name: \"chunk-wangeditor\", priority: 21, test: /[\\\\/]node_modules[\\\\/]wangeditor[\\\\/]/, }, vue: { name: \"chunk-vue\", priority: 20, test: /[\\\\/]node_modules[\\\\/]vue[\\\\/]/ }, moment: { name: \"chunk-moment\", priority: 15, test: /[\\\\/]node_modules[\\\\/]moment[\\\\/]/, }, lodash: { name: \"chunk-lodash\", priority: 15, test: /[\\\\/]node_modules[\\\\/]lodash[\\\\/]/, }, axios: { name: \"chunk-axios\", priority: 15, test: /[\\\\/]node_modules[\\\\/]axios[\\\\/]/, }, idValidator: { name: \"chunk-idValidator\", priority: 15, test: /[\\\\/]node_modules[\\\\/]id-validator[\\\\/]/, }, libs: { name: \"chunk-libs\", test: /[\\\\/]node_modules[\\\\/]/, minChunks: 4, priority: 10, reuseExistingChunk: true, }, common: { name: \"chunk-common\", test: resolve(\"src/components\"), // 可自定义拓展你的规则 minChunks: 4, // 最小共用次数 priority: 5, reuseExistingChunk: true } } }, runtimeChunk: { name: 'runtime' }},module: { rules: [ { test: /\\.vue$/, loader: 'vue-loader', options: vueLoaderConfig }, { test: /\\.js$/, loader: 'babel-loader', include: [resolve('src'), resolve('test')], exclude: /node_modules/ }, { test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, loader: 'url-loader', options: { limit: 10000, name: utils.assetsPath('img/[name].[hash:7].[ext]'), } }, { test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/, loader: 'url-loader', options: { limit: 10000, name: utils.assetsPath('media/[name].[hash:7].[ext]') } }, { test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/, loader: 'url-loader', options: { limit: 10000000, // 注意到这里我设置的很大，因为字体文件太大，大概28k,也采取转换成base64，减少http请求 name: utils.assetsPath('fonts/[name].[hash:7].[ext]') } } ]},plugins: [ - new webpack.optimize.CommonsChunkPlugin('common.js'), + new VueLoaderPlugin(), - new webpack.optimize.CommonsChunkPlugin('common.js'), - new webpack.ProvidePlugin({ - jQuery: \"jquery\", - jquery: \"jquery\", - \"window.jQuery\":\"jQuery\", - $: \"jquery\" - }),],+ externals: require('./cdn').externals... webpack.dev.conf.js 新增 mode 选项 1234module.exports = { + mode: 'development', // 'production', 'development' or '无 (none)' + externals: require('./cdn').externals} webpack.prod.conf.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100- const ExtractTextPlugin = require('extract-text-webpack-plugin')+ const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")- const UglifyJsPlugin = require('uglifyjs-webpack-plugin') plugins: [// http://vuejs.github.io/vue-loader/en/workflow/production.htmlnew webpack.DefinePlugin({ 'process.env': env}),// new UglifyJsPlugin({// uglifyOptions: {// compress: {// warnings: false,// drop_debugger: true,// drop_console: true// }// },// sourceMap: config.build.productionSourceMap,// parallel: true// }),// extract css into its own filenew MiniCssExtractPlugin({ filename: utils.assetsPath('css/[name].[contenthash].css'), // Setting the following option to `false` will not extract CSS from codesplit chunks. // Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack. // It's currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it's `false`, // increasing file size: https://github.com/vuejs-templates/webpack/issues/1110 allChunks: true,}),// Compress extracted CSS. We are using this plugin so that possible// duplicated CSS from different components can be deduped.new OptimizeCSSPlugin({ cssProcessorOptions: config.build.productionSourceMap ? { safe: true, map: { inline: false } } : { safe: true }}),// generate dist index.html with correct asset hash for caching.// you can customize output by editing /index.html// see https://github.com/ampedandwired/html-webpack-pluginnew HtmlWebpackPlugin({ filename: config.build.index, template: 'index.html', inject: true, hash: version, minify: { removeComments: true, collapseWhitespace: true, removeAttributeQuotes: true, // more options: // https://github.com/kangax/html-minifier#options-quick-reference }, cdn: require('./cdn').cdn, // necessary to consistently work with multiple chunks via CommonsChunkPlugin chunksSortMode: 'dependency'}),// keep module.id stable when vendor modules does not changenew webpack.HashedModuleIdsPlugin(),// enable scope hoistingnew webpack.optimize.ModuleConcatenationPlugin(),// split vendor js into its own file// new webpack.optimize.CommonsChunkPlugin({// name: 'vendor',// minChunks (module) {// // any required modules inside node_modules are extracted to vendor// return (// module.resource &amp;&amp;// /\\.js$/.test(module.resource) &amp;&amp;// module.resource.indexOf(// path.join(__dirname, '../node_modules')// ) === 0// )// }// }),// // extract webpack runtime and module manifest to its own file in order to// // prevent vendor hash from being updated whenever app bundle is updated// new webpack.optimize.CommonsChunkPlugin({// name: 'manifest',// minChunks: Infinity// }),// // This instance extracts shared chunks from code splitted chunks and bundles them// // in a separate chunk, similar to the vendor chunk// // see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk// new webpack.optimize.CommonsChunkPlugin({// name: 'app',// async: 'vendor-async',// children: true,// minChunks: 3// }),// copy custom static assetsnew CopyWebpackPlugin([ { from: path.resolve(__dirname, '../static'), to: config.build.assetsSubDirectory, ignore: ['.*'] }])] build/util.js 123456789101112131415161718192021222324252627282930const ExtractTextPlugin = require('extract-text-webpack-plugin')- const ExtractTextPlugin = require('extract-text-webpack-plugin')+ const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")function generateLoaders(loader, loaderOptions) { const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader] if (loader) { loaders.push({ loader: loader + '-loader', options: Object.assign({}, loaderOptions, { sourceMap: options.sourceMap }) }) } // Extract CSS when that option is specified // (which is the case during production build) if (options.extract) { return [MiniCssExtractPlugin.loader].concat(loaders) // return ExtractTextPlugin.extract({ // use: loaders, // publicPath: '../../', // fallback: 'vue-style-loader' // }) } else { return ['vue-style-loader'].concat(loaders) }} splitChunks 分离代码后，过大的插件被提取出来 合理使用缓存 静态图片和字体尽量缓存 cdn 123456789101112131415161718192021222324252627282930const isProduction = process.env.NODE_ENV === 'production';module.exports = { cdn: { css: [ 'https://unpkg.com/element-ui@2.15.9/lib/theme-chalk/descriptions.css', ], js: [ // \"https://unpkg.com/vue@2.6.10/dist/vue.min.js\", // \"https://unpkg.com/element-ui@2.15.7/lib/index.js\", 'https://unpkg.com/vuex@3.6.2/dist/vuex.min.js', 'https://unpkg.com/wangeditor@4.7.11/dist/wangEditor.min.js', 'https://unpkg.com/xlsx@0.15.6/dist/xlsx.full.min.js', 'https://unpkg.com/echarts@4.9.0/dist/echarts.min.js', 'https://map.qq.com/api/gljs?v=1.exp&amp;key=BSVBZ-5XSCX-EMQ4D-TIK2X-SIE2T-E6FQ5', // 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js', // 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/locale/zh-cn.min.js' ], }, externals: { // vue: \"Vue\", // \"element-ui\": \"ElementUI\", vuex: 'Vuex', wangeditor: 'wangEditor', XLSX: 'xlsx', echarts: 'echarts', TMap: 'TMap', // moment: \"moment\", },}; 找到 public/index.html。将 js 和 css 资源注入。 1234567891011121314151617&lt;head&gt; &lt;title&gt;${process.env.APP_ENV_NAME}&lt;/title&gt; &lt;!-- 引入样式 --&gt; &lt;% for(var css of htmlWebpackPlugin.options.cdn.css) { %&gt; &lt;link rel=\"stylesheet\" href=\"&lt;%=css%&gt;\"&gt; &lt;% } %&gt;&lt;/head&gt;&lt;body&gt; &lt;% for(var js of htmlWebpackPlugin.options.cdn.js) { %&gt; &lt;script src=\"&lt;%=js%&gt;\"&gt;&lt;/script&gt; &lt;% } %&gt; &lt;!-- built files will be auto injected --&gt; &lt;div id=\"app\"&gt;&lt;/div&gt;&lt;/body&gt; 文件压缩 - 图片压缩 免费的 web 端工具TinyPNG将 images 拖进去，替换掉你的图片，尺寸大幅度压缩并保证质量。 gzip 压缩 123456789101112131415if (config.build.productionGzip) { const CompressionWebpackPlugin = require('compression-webpack-plugin'); webpackConfig.plugins.push( new CompressionWebpackPlugin({ asset: '[path].gz[query]', algorithm: 'gzip', test: new RegExp( '\\\\.(' + config.build.productionGzipExtensions.join('|') + ')$' ), threshold: 100, minRatio: 0.8, }) );} 折腾到这里，构建速度 40 左右，dist 压缩到 4M。首屏加载控制在 1s。效果显著！ 组件升级，支持虚拟加载 老项目中，使用 el-select，el-table 都不支持大数据虚拟加载，低版本存在卡顿现象 封装列表组件比较费时费力，版本 element-ui plus 支持虚拟加载。目前仅 keep-alive 来降低 dom 渲染消耗 推荐阅读 webpack 的黑历史 panjiachen 大佬对 cdn 的使用建议","link":"/2072f84bb4b4/"},{"title":"福利-福晰pdf编辑器激活码","text":"福昕 pdf 编辑器激活码 激活秘钥: 13601-020CF-R1NZ5-SBE8A-9BF8R-B7IMS填写：西南民族大学 地址： http://ms.swun.edu.cn/download/fuxinpdfwin.html 教程","link":"/3b219825206b/"},{"title":"解析package.json文件","text":"在每个前端项目中，都有package.json文件，它是项目的配置文件，常见的配置有配置项目启动、打包命令，声明依赖包等以vue-element-admin项目为例子： https://gist.github.com/xuxia2013/11b22c759bc1a35587c8499f534847d0","link":"/d1720a0fff5f/"},{"title":"谈判力","text":"豆瓣地址 读后感简直不敢相信和《优势谈判》是同一作者，案例多次拿出来讨论，读起来没有任何新意，道理“很软”，无法打动我。大部分都在说如何把你的对手和你拉回谈判桌上，理智的进行下去。在我看来，在实际中没有什么帮助，会被对手碾压“温和派”谈判风格，我不认为可以有效用 谈判是从别人那里寻求自己所需的一个基本途径，是与谈判对方存在相同和不同利益时寻求解决方案的相互交流 原则谈判的原理是在道理、原则上强硬，对人则采取温和的态度。它不需要耍花招，不需要装腔作势。原则谈判让你得到想要的东西而又不失风度，它让你公平有理的同时又能保护自己不被对方利用 要在立场上讨价还价 在立场上纠缠不清不能达成明智的协议 如果双方就各自的立场讨价还价，他们通常会抱着立场不放。你越是声明自己的原则，保护自己的立场，你的立场就越坚定。你越想让对方明白改变你最初的立场是非分之想，你就会越死守自己的立场。直到把你的自我形象当成了你的立场。你现在又多了一个目标，就是保存自己的脸面—把今后的行为和过去的立场联系起来，这就使得谈判越来越不可能就双方的最初利益达成共识。 在立场上纠缠，缺乏效率 在立场上纠缠影响双方之间的关系 多方参与使立场式谈判更为不妙 友善不能解决问题 选择方案 以下四点几乎适用于任何场合每一点都围绕谈判的一个基本要素提出建议。 人：把人和事分开。 利益：着眼于利益，而不是立场。 选择：为共同利益创造选择方案。 标准：坚持使用客观标准。 每个谈判者都有两方面利益也就是：实质利益和关系利益 能站在对方的角度考虑问题，是谈判者应该掌握的最重要的技巧之一，尽管真正做到这一点并不容易。只认识到对方看问题的角度与我们的不同是不够的。如果想影响对方，则还需要切身理解对方观点的分量所在，感受对方深信不疑的观念中所包含的情感力量 讨论各自对问题的认识。消除认识分歧的一种办法是，亮出各自的想法，与对方进行讨论。只要做到态度坦率、诚恳，双方不从自己的角度出发指责对方，这样的讨论就能让双方怀着一份理解，认真倾听对方的真正意图。 采取象征性的姿态道歉是一项成本最小而收益最大的投资 着眼于利益，而不是立场 利益才是问题的关键 人和事分开 为共同利益创造选择方案 坚持使用客观标准 创造多种选择方案是谈判者可以拥有的最具价值的一笔财富。 在大多数谈判中，有四大障碍阻止了人们创造多种选择的方案： （1）不成熟的判断； （2）寻求单一的答案； （3）以为馅饼的大小是不变的； （4）认为“他们的问题应该由他们自己解决”。 为了克服这些障碍，你必须了解它们。 列一张清单。要理清谈判各方不同的利益，最好列一张清单，想到什么就写下来。这么做不仅能帮助你记住这些利益，而且当你获得新信息并把这些利益按重要性排序时，它有助于你提高评估质量。另外，这么做也许能启发你如何满足这些利益。 人们往往从心理上不愿承认对方观点的合理性；似乎想办法满足对方利益就是跟自己过不去。缺乏长远目光，只顾自己，导致谈判者只能形成片面的立场，片面的论据以及片面的解决方案。 关于共同利益，有三点值得牢记： 第一，共同利益潜藏在每项谈判中，它们往往不是即时可见的。 第二，共同利益只是机遇，不是天上掉下来的馅饼。要让它发挥作用，你必须对此有所作为。明确提出共同利益，并作为双方的共同目标，这将有助于谈判的进展。 第三，强调你们的共同利益可以使谈判变得愉快、顺利 融合不同利益：人们总是以为双方的差异会造成问题，却不知差异也能解决问题。 协议总是建立在分歧基础上。最利于双方达成协议的差异类型是利益差异、观念差异、不同的时间观、不同预期和对风险的不同态度等 不要再增加“谈判空间”—— 提供可吸引对方的选择项 尽量让对方的决定变得容易（感觉在瞎扯） 坚持使用客观标准独立于任何个人意愿—也就是根据客观标准来进行谈判。 原则谈判能愉快、有效地达成明智的协议。越是用公平原则、效率原则或科学标准解决具体问题，就越有可能最终达成明智而公平的一揽子协议 如果对方实力更强大怎么办当所有天平都倒向对方时，没有一种谈判模式能保证成功 面对强大的对手，最好的谈判结局不外乎实现下面两大目标： 第一是保护自己，不至于接受本应拒绝的协议； 第二是让你的谈判资源发挥最大效用，使达成的协议能尽量满足你的利益需求 制定你的最佳替代方案。积极寻找谈判破裂后自己所面临的选择，可以大大增强你的谈判实力。好的选择方案不会摆在那里等着你去拿，你必须自己去寻找。拿出最佳替代方案需要三个步骤： 第一，提出如果不能达成协议自己所要采取的措施； 第二，完善其中最有希望的想法，并把它们转化成具体的替代方案； 第三，初步选定看上去最好的替代方案 你越是能够轻松愉快地离开谈判桌，就越能左右谈判的结果。 如果对方不合作怎么办好比东方武术中的柔道和柔术一样，你避免与对方直接抗衡，运用躲闪技巧，借助对方的力量达到自己的目的。不要对抗对方的力量，相反，要把对方的力量引导到探讨双方利益、制定共同受益的选择方案和寻求客观标准上来。 不要攻击对方的立场，而是透过立场看利益 要替自己的想法辩护，欢迎批评和建议。谈判的大部分时间都花在相互指责上。与其拒绝对方的批评，不如对此持欢迎态度。我们不应要求对方接受或放弃某个观点，而应问对方这个观点是否有什么不妥。-&gt; 分析对方的否定态度，发现其中潜在的利益，并站在他们的角度改进自己的想法。根据你从对方了解的情况重新制定自己的方案，这样，批评就不再是谈判进程中的障碍，而成为达成协议必不可少的因素 把批评引向建设性轨道的另一种方法是，换位思考，征求对方的意见 提问与停顿。注重谈判柔术的人使用两个关键手段沉默是你最好的武器，要充分利用它。如果对方提出不合理方案或是采取在你看来站不住脚的攻击，最好的手段是一言不发。 沉默往往给人一种僵持不下的印象，对方为了打破僵局，不得不回答你的问题或者提出新的建议。因此在你提问之后，先停顿一下。不要急于提出新问题或发表自己的评论，给对方逃避尖锐问题的机会。有时，最有效的谈判是在你没有开口时发生的。 考虑使用独立调解程序独立调解程序作为一种机制，在限制决定数量、减少每个决定的不确定性以及防止谈判各方固守自己立场方面十分见效。独立调解程序对有第三方介入的双边谈判大有帮助，而对于多边谈判几乎是不可或缺的使用独立调解程序不必等到各方都同意。你只需要准备一份草案，然后征求各方的批评意见 乐于接受别人的指正和劝说，是原则谈判的战略支柱。只有乐于听取对方建议，才能说服对方以同样的态度接受你提出的原则和客观事实。 如果对方使用卑鄙手段怎么办人们可以运用种种手段和计谋占你的便宜。每个人都略知一二，例如谎言、心理攻击以及其他各种施压手段。这些手段是违法和不道德的，或者是让人感到不快的，其目的都是帮助使用者在非原则意志较量中“赢得”某些实际利益，我们称这种手段为诡计式谈判 当对方使用诡计时，商定谈判规则有三个步骤：发现诡计，揭穿诡计，质疑诡计的合理性与可取性—谈判就围绕这三步展开 不要为了教训对方而转移谈判的目的着眼于利益，而不是立场在互相让步之前，首先确定对方的权限。问一句：“你在谈判中有多大权力？”这是完全合理的 心理战术这种手段就是为了让你感觉不舒服，这样你潜意识里希望尽快结束谈判。环境压抑 如果发现周围环境对你不利，要立即指出来 人身攻击红白脸战术 红白脸战术是一种心理攻势，在打圆场的家伙说完之后回击威胁就是施压，施压的结果往往适得其反，它不但不解决问题，反而会带来压力。它不是帮助对方更容易作出决定，而是给对方增加难度 对方的威胁也可以变为你的政治优势 -&gt; 坚持原则也许是回应威胁的最好方式 立场上施压计策这种讨价还价的计策是营造某种声势，只使一方作出有效让步。 应对策略：首先，要认识到这一招是谈判的一种手段，目的是把同意谈判作为讨价还价的筹码，以获得实质上的让步。这一招的另一种形式是为谈判设置先决条件。接着，与对方谈谈他们拒绝谈判的理由。可以直接与对方交流或通过第三方进行沟通。不要因为对方拒绝谈判就抨击他们，而要找出对方拒绝谈判的利益所在然后，你可以提出一些选择方案最后，要坚持使用原则 锁定战术你可以用阻断对方传达信息的方式来应对强硬的破釜沉舟战术你也可以使用原则来抵制对方的锁定强硬的同伴。最常见的用来拒绝对方要求的谈判技巧是，谈判者本人称自己并不反对，但他的那位不好说话的同伴是不会答应的 故意拖延 不要成为牺牲品 关于本书，人们常问的10个问题","link":"/6a0f853a8be3/"},{"title":"迁移博客到阿里云","text":"之前在github pages上部署了博客，后来发现百度不收录，挣扎下，购入一台阿里云的云服务器liunx，一键部署到github和阿里云上，国内外都能访问，这样就好很多了。 这样我们在本地编写好文章，hexo clean &amp;&amp; hexo d 后,部署Hexo帮我们生成静态的html页面，并通过Hexo将生成的html文件上传到我们的阿里云服务器。 相关阅读： 如何零成本搭建一个博客如何同步并管理我的文章 本地访问服务器服务器配置 Mobaxterm软件下载：https://mobaxterm.mobatek.net/ 填写外网地址，用户root和密码 环境搭建安装nginx，git12yum install nginxyum install git 测试是否安装成功：出现 Ngnix 相关版本信息，则表明成功。 12[root@iZbp17a3lpyn5dsm8xnv7rZ ~]# nginx -vnginx version: nginx/1.22.1 可以查看下 nginx 相关的目录： /usr/sbin/nginx: nginx 主程序 /etc/nginx: 存放 nginx 相关配置 /var/log/nginx: 存放 nginx 日志 我们来到 ect/nginx文件夹下，选中nginx.conf右击选择第二个[open with default text editor]打开默认文本编辑。 配置nginx123456789server { listen 80; server_name [你的域名]; location / { root /root/my-blog/public/; // 这里是我的博客存放路径，记得换成你的 index index.html; }} 我们要通过80端口访问nginx服务，、添加安全组阿里云工作台：点击云服务器/ECS安全组-配置规则-添加安全规则 启动nginx 1service nginx reload 这个时候你可以在你的静态目录下创建一个html，通过外网ip来检测是否配置成功了。 自动化部署创建git用户123adduser gitchmod 740 /etc/sudoersvim /etc/sudoers 按i键由命令模式切换到编辑模式，:wq保存退出 12root ALL=(ALL) ALL+ git ALL=(ALL) ALL 1234567sudo passwd git // 需要root权限设置Git用户的密码su gitmkdir ~/.sshvim ~/.ssh/authorized_keys#然后将电脑中执行 cat ~/.ssh/id_rsa.pub ,将公钥复制粘贴到authorized_keyschmod 600 ~/.ssh/authorzied_keyschmod 700 ~/.ssh 在本地打开终端： 1ssh -v git@SERVER 可以看是否能访问了。 服务器git配置123cd /home/gitgit init --bare hexo.gitchown -R git:git hexo.git //修改权限 在 /home/git/hexo.git/hooks/post-receive 文件中写入： 12#!/bin/shgit --work-tree=/root/my-blog/public --git-dir=/home/git/hexo.git checkout -f 1chmod +x post-receive //修改权限 至此，我们可以在本地 git clone git@SERVER 克隆下来文件了。 hexo配置根目录config.yml文件 1234567deploy:- type: 'git' repo: git@120.27.234.107:/home/git/hexo.git branch: 'master'- type: 'git' repo: https://github.com/xuxia2013/xuxia2013.github.io.git branch: 'main' 测试是否能部署到阿里云上： 1hexo d 成功！","link":"/02d5b1c6e6af/"},{"title":"如何基于Vue快速搭建可视化大屏平台","text":"我们公司一直都有做大屏的业务需求，对于客户有数据监控，实时能观测海量数据，酷炫的动态图表，在大屏上展示更生动和震撼，效果好到炸裂 1. 首选阿里DataV数据可视化 DataV提供图形化编辑页面，使用简单拖拽的方式即可完成多种样式和数据配置，无需编程就能轻松搭建。定制了能源、电力、医疗、零售、制造、气象、教育、旅游、物流、互联网等多个行业数据模板。 内容丰富，轻松上手，入股不亏~ 新用户短期9.9搞定。 2. 积木报表http://www.jimureport.com/bigscreenIndex 微信登录后，可免费使用 3. iGaoWei/BigDataView如果你还是想自己捯饬，也有很多免费的模板下载100套大数据可视化炫酷大屏Html5模板；包含行业：社区、物业、政务、交通、金融银行等，全网最新、最多，最全、最酷、最炫大数据可视化模板 纯h5静态代码，参数接口还是要自己来写写代码的。 4. jackchen0120/vueDataV基于vue的新各行各业实用模板和炫酷小组件，有能力开发的话可以自行配合使用 5. DataV-Team/Datav 7.5K一个基于Vue的数据可视化组件库，通过组合不同的配置项可以达到多变的视觉效果 同时有第三方开源库：Echarts（百度），AntV，Highcharts，D3.js，three.js等Echarts相对简单些，容易上手，很多项目二次开发。 各位看官自行取舍。 延伸阅读 大屏做成这样，领导想不重用你都难！https://zhuanlan.zhihu.com/p/28557620","link":"/992d13211977/"},{"title":"vscode浅色主题使用","text":"一款看起来舒适的主题太重要了，加上高亮的效果，开发起来格外顺心顺意。身边很多程序员都热爱暗黑色系，但我却喜欢浅色系，自己也定义了很多主题。希望大家能找到自己喜欢的主题。 如何设置主题File -&gt; Preferences -&gt; Color Theme vscode自带主题light + Light High Contrast Quiet Light 安装新插件我是不喜欢自带的主题，无功无过。 经过不断试用，我找到了这一款: 简单，色彩鲜艳，共有6个选择，我选了【Ayu Mirage Bordered】赏心悦目。 https://marketplace.visualstudio.com/items?itemName=teabyii.ayu 效果如下： 自定义主题方式一默认的颜色主题配置文件都位于 Microsoft VS Code\\resources\\app\\extensions\\theme-defaults\\themes 目录中, 12345resources/app/extensions/ \\_ theme-my/ \\_ themes/ | \\_ color-theme.json |_ package.json 你完全可以安照这个结构自己复刻一个新的主题 123456789101112131415{ \"name\": \"theme-my-gray\", \"version\": \"0.1.0\", \"publisher\": \"my\", \"engines\": { \"vscode\": \"*\" }, \"contributes\": { \"themes\": [ { \"label\": \"my-gray\", \"uiTheme\": \"my\", \"path\": \"./themes/my-gray-color-theme.json\" } ] }} 方式二File -&gt; Preferences -&gt; Setting，以源码形式打开后，在再写些代码来配置 123456789101112\"workbench.colorCustomizations\": { \"editor.selectionBackground\": \"#409EFF\", // 编辑器所选内容的颜色 \"editor.findMatchBackground\": \"#F56C6C\", // 当前搜索匹配项的颜色 \"editor.findMatchHighlightBackground\": \"#e09a30\", // 其他搜索匹配项的颜色 \"menu.selectionBackground\": \"#409EFF\", \"list.hoverBackground\": \"#409EFF\", // 选中行背景色 \"editor.selectionHighlight\": true, \"list.inactiveSelectionBackground\": \"#ecf5ff\", // 左侧打开文件背景色 },\"editor.tokenColorCustomizations\": { \"comments\": \"#409EFF\", // 修改注释颜色}, 官网配置项文档：https://code.visualstudio.com/api/extension-guides/color-theme 方式三首先需要安装插件，用来生成主题。 1npm install -g yo generator-code 安装完毕之后，使用下面的命令来生成扩展的基本结构： 1yo code 运行上面的命令，需要你输入或者选择一些内容： 是否发送反馈 创建扩展类型，这里选择颜色主题 是创建新的还是导入现有的 主题是浅色还是深色、名称、创建者、其他用户在市场中看到的主题名等等 是否初始化git仓库 根据提示和自己的需要，直到提示创建成功, 再把文件themes放在方式一目录下 结束","link":"/1a222761d40a/"},{"title":"vue cli3整合多应用项目","text":"背景前一段时间接到领导指示去协助别的组一个项目，项目很是复杂，丢过来源码压缩包就有144M，项目中包含纯h5项目, 小型vue项目，这些页面互相之间没有什么关联，有一个首页链接到每一个小应用中，同时，有很多共同的依赖包，需求是能整合到一个项目中方便后续开发。考虑到业务代码太庞大，我自己对业务代码不太熟悉，万一调整太多遭到半路堵截，思虑再三，不过好在cli3版本增加了pages属性，配置起来相当轻松。 开始第一步首先 vue create app 初始化名为 app 的项目 第二步把目录结构调整成 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950├── public/ # 放置纯静态项目│ └── ...├── src/ # 项目代码入口│ ││ ├── components # 多个项目共享的组件│ ├── utils # 多个项目共享的工具库│ ├── assets # 多个项目共享的静态资源│ ││ └── pages # 多个项目页面划分│ ├── index/ # 首页项目│ │ ├── views # 页面│ │ ├── router.js # 路由文件│ │ ├── index.js # 页面/应用入口文件│ │ ├── app.vue│ │ ├── index.html│ │ └── ...│ ├── page1/ # 模块小应用│ │ ├── assets │ │ ├── components # 该页面/应用自身的组件│ │ ├── store # │ │ ├── router # 路由文件│ │ ├── utils # 该页面/应用自身的工具库│ │ ├── index.js # 页面/应用入口文件│ │ ├── app.vue│ │ ├── index.html│ │ └── ...│ └── page2/ # 第二个页面或者应用│ │ ├── index.js # 页面/应用入口文件│ │ └── ...│ └── pageN/ # 第N个页面或者应用│ ├── index.js # 页面/应用入口文件│ └── ...├── build/ # 项目打包代码│ ├── .../ # public静态项目│ ├── page1/ # 第一个页面或者应用│ │ ├── [hash].js│ │ └── index.html # 页面/应用入口文件│ ├── page2/ # 第二个页面或者应用│ │ ├── [hash].js│ │ └── index.html # 页面/应用入口文件│ └── pageN/ # 第N个页面或者应用│ ├── [hash].js│ └── index.html # 页面/应用入口文件├── babel.config.js # babel编译参数├── postcss.config.js├── vue.config.js├── .browserslistrc├── .eslintrc.js├── .gitignore└── package.json # 项目文件，记载着一些命令和依赖还有简要的项目描述信息, 还有共同的依赖包 文件解析package.json 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647{ \"name\": \"app\", \"version\": \"0.1.0\", \"private\": true, \"scripts\": { \"dev\": \"vue-cli-service serve\", \"build\": \"vue-cli-service build\", \"lint\": \"vue-cli-service lint\" }, \"dependencies\": { \"vue\": \"^2.6.10\", \"vuex\": \"^3.0.1\", \"vue-router\": \"^3.0.3\", \"vux\": \"^2.9.2\", \"axios\": \"^0.24.0\", \"reqwest\": \"^2.0.5\", \"vant\": \"^2.12.33\", \"mint-ui\": \"^2.2.13\", \"dragula\": \"^3.7.2\", \"fastclick\": \"^1.0.6\", \"fundebug-javascript\": \"^1.6.0\", \"fundebug-vue\": \"0.0.1\", \"amfe-flexible\": \"^2.2.1\", \"core-js\": \"^2.6.5\" }, \"devDependencies\": { \"@vue/cli-plugin-babel\": \"^3.5.0\", \"@vue/cli-plugin-eslint\": \"^3.5.0\", \"@vue/cli-service\": \"^3.5.0\", \"@vue/eslint-config-prettier\": \"^5.0.0\", \"autoprefixer\": \"^9.7.2\", \"babel-eslint\": \"^10.0.1\", \"babel-plugin-import\": \"^1.13.5\", \"eslint\": \"^5.16.0\", \"eslint-plugin-prettier\": \"^3.1.0\", \"eslint-plugin-vue\": \"^5.0.0\", \"glob\": \"^7.1.4\", \"less\": \"^3.0.4\", \"less-loader\": \"^4.1.0\", \"node-sass\": \"^4.13.0\", \"postcss-pxtorem\": \"^4.0.1\", \"prettier\": \"^1.18.2\", \"sass-loader\": \"^8.0.0\", \"vue-template-compiler\": \"^2.5.21\", \"@vux/loader\": \"^2.0.0-rc4\" }} vue.config.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const glob = require(\"glob\");// const autoprefixer = require(\"autoprefixer\");// const pxtorem = require(\"postcss-pxtorem\");const path = require(\"path\");// const vuxLoader = require(\"vux-loader\");function getEntry(url) { let entrys = {}; glob.sync(url).forEach(item =&gt; { // splice(-3)取数组后三项 let urlArr = item.split(\"/\").splice(-3); entrys[urlArr[1]] = { entry: \"src/pages/\" + urlArr[1] + \"/\" + \"index.js\", template: \"src/pages/\" + urlArr[1] + \"/\" + \"index.html\", filename: urlArr[1] + \".html\", title: \"pages-\" + urlArr[1] }; }); return entrys;}let pages = getEntry(\"./src/pages/**?/*.html\");module.exports = { lintOnSave: false, pages, devServer: { proxy: { \"/\": { target: \"\" } } }, css: { loaderOptions: { less: { lessOptions: { modifyVars: { \"text-color\": \"#111\", \"border-color\": \"#eee\", hack: `true; @import \"${path.join( __dirname, \"/src/pages/search/style/reset.less\" )}\";` } } } // postcss: { // plugins: [ // // autoprefixer(), // pxtorem({ // // rootValue: 37.5, //设置根元素为37.5px // propList: [\"*\"] // }) // ] // } } }, configureWebpack: config =&gt; { require(\"@vux/loader\").merge(config, { plugins: [\"vux-ui\"] }); }}; babel.config.js 1234567891011121314module.exports = { presets: [\"@vue/app\"], plugins: [ [ \"import\", { libraryName: \"vant\", libraryDirectory: \"es\", style: name =&gt; `${name}/style/less` }, \"vant\" ] ]}; 运行和构建 安装：yarn 运行: yarn dev，网页输入 http:localhost:8080 打包: yarn build 重新启动项目，访问下面两个地址即可看到多页面的效果。 http://localhost:8080/project1#/ http://localhost:8080/project2#/ 结束延伸阅读 https://cli.vuejs.org/zh/config/#pages","link":"/9eb64e997ad7/"},{"title":"前端工程化-自动化运维部署之jenkins","text":"大部分公司的前端项目发布工作，都是通过jenkins ⭐20k和k8s ⭐94k来自动化的方式进行部署。正式环境都是运维部门去做的，申请上线单提前给过去，测试环境的话太频繁，几乎是开发或者测试来部署。目前我也只用过这两个工具，通过 web 操作，很是方便。 前端开发者平日里只需要把代码提交到 git 库即可，也无需懂这些活儿，面试的时候也很少涉及，你问，那为啥还要看这些？ 我不会说多学点东西是好的，因为再好的知识，对你没有用终归随着时间而淡忘。比如说在正式环境抛错，图片文件加载慢，测试环境正常，影响到用户使用的时候，你知道运维同学哪里没有配置好，nginx 没有配置好，gzip 没有开启，或者代码不是最新的时候，你能最快定位问题而不是去怀疑自己提交了有 bug 的代码。在你需要运维/后端同学配合优化项目的时候，你有资格和他们讨论怎么做，如何不给其他部门同事增加额外工作量，不使别人反感，同时快速推进功能，提升业务质量的时候。你会明白涉及到工作交付上下游同事的工作，你都应该多懂点。 今天就先聊聊 Jenkins 核心点持续集成随着业务增大，开发人员增多，项目迭代快速，多分支提交功能到测试分支，由测试分支合并到 uat 分支，再回归测试、压力测试后，再合并代码至 master 分支，完成业务迭代，与此同时，小优化小 bug 已经在开发分支提交测试了，多条任务线穿插…是不是已经应接不暇了。 持续集成就是可以快速迭代，在代码更新后，自动化测试（很多公司并不配置，业务来驱动），自动拉取，自动构建，自动部署到生产机子上，这一流程使项目质量得到很大的保证。同时这样每次更新一个功能点，发现错误也更容易、迅速。回滚代码操作也是非常简单。 持续交付就是说代码不管什么时候更新，用户总是无感的，随时可以交付产品/项目 持续部署代码经部们负责人代码审核后（或者没有这一环节），可以开始部署到生产阶段了。 环境 windows 安装包 Java 8 ( JRE 或者 JDK 都可以，支持 Java11-17 版本，链接) 下载 官网镜像地址: https://mirrors.jenkins.io/下载地址： https://jenkins.io/download/华为镜像地址: https://mirrors.huaweicloud.com/home阿里云：https://mirrors.aliyun.com/jenkins/?spm=a2c6h.13651104.0.0.c800db0exjUxTr 安装 官网：https://www.jenkins.io/zh/doc/pipeline/tour/getting-started/ 第一步 12λ cd /d D:\\software\\jenkins // 你的文件安装路径下λ java -jar jenkins.war --httpPort=7777 --enable-future-java // 端口号7777，默认8080 浏览器打开 http://localhost:7777/ 安装提示完成初始化 成功 全局配置至 Manage Jenkins -&gt; Global Tool Configuration, 配置 NodeJs 创建Pipeline 回滚配置 1234567891011121314151617181920212223242526272829echo \"##################################\"echo $WORKSPACEecho $BUILD_DISPLAY_NAMEecho \"Status:$Status\"case $Status in Deploy) #发布 path=\"${WORKSPACE}/bak/${BUILD_DISPLAY_NAME}\" #创建每次要备份的目录 if [ -d $path ]; then echo \"The files is already exists \" else mkdir -p $path fi \\cp -R ${WORKSPACE}/dist/. $path #将打包好的包备份到相应目录,覆盖已存在的目标 echo \"Completing!\" ;; Rollback) #回滚 cd ${WORKSPACE}/dist/ #进入备份目录 rm -rf * \\cp -rf ${WORKSPACE}/bak/$Version/. ${WORKSPACE}/dist/. #将备份拷贝到程序打包目录中，并覆盖之前的war包 echo \"Completing!\" ;; *) exit ;;esac 然后出现这样，就成功了. 每一次构建成功后，留下备份dist文件夹，复制一份到文件夹bak下，回滚的时候按手动选择哪次构建版本号来替换源文件 结束","link":"/9f5a64e98515/"},{"title":"技术出身的能做好管理吗？","text":"都说30岁是个坎，这话果然不错，30岁之前，我对自己的职业定位是在前端领域里继续深耕，个人技术能力再升级最终走向，架构师、CTO的终点，还可以继续写自己的页面，写个十年，二十年，在上海安家养老。 那个时候，在前端组组内还是挺舒服的状态，成员彼此很熟悉，经常在一起讨论技术，沟通问题，薪资还算不错，经常加班加点，也是小有成就，独立做项目，独立和产品沟通，和上下游同事打成一片，有时间自己去徒步，参加技术线下活动，时光温柔安静，一切都朝着自己的梦想前进着。 也算是运气好，遇到值得相守此生的人，再加上遇到公司内部大调整，我知道自己可能是时候去过另外一个人生了，其中还是有很多纠结过难熬过这里就简单带过了。结完婚，去三亚拍婚纱照，云南度完蜜月，再加上一直没有时间请的假，婚假期，闲闲散散的国内玩了好几个月，轻松甜蜜。后来选择在浙江定居下来了。 新婚后生活总是新奇的体验，安定下来后，我开始找工作，一开始只想先找个大公司先熟悉下来，毕竟环境大大的不一样，也怕自己适应不下来，先有份工作再说，因为这里不再有熟悉的前同事，前领导，没有一点点人脉，然后自己投简历，幸运的是很快就找到第一家公司，说是要的薪资太高，最终没有谈拢，我开始调整自己的心态，多做些调查和打听，第二次面试后顺利的入职了。一周后上手项目做业务了，也熟悉了技术栈和团队的大概情况。 跟很多做技术的一样，领导直接安排你做负责人，负责技术选型和难点敲定功能点，把控前端项目，前端团队的任何事情大家都开始来找我，再加上做技术的大部分都不太喜欢跟人打交道，我也是不喜欢的，首先沟通的工作是最累人的，而且花时间还没有成效不如自己敲代码来的实际，再加上我偶尔有点小脾气，在这条技术管理的路上开始遇到了坎坷。。。 然而现在我也非常热爱现在的团队，找到了新的自己，团队管理也算略有心得，这里跟大家分享一二。 角色转变认同价值认同管理的价值，认同组内成员输出的价值 你不再是一个单打独斗的英雄，而是团队负责人，思维从“工程师” 转成“产品经理”，不仅要对自己手头上的工作负责，还要带领整个团队前进，对自己领导负责，对下属负责，三方的目标要达到一致。 在了解领导的要求和规划后，合理安排任务，倡导自由领取任务和允许跨端开发，给予研发上自由和鼓励创新的新想法。以结果为导向，任务划分详细，交代任务背景和要求，提出自己的方案来引导其他人思考，或者大致给出方向，再给与风险评估，可行性评估在下属遇到难点卡点的时候协助一二，多去问他们都做了哪些尝试，肯定下属付出的同时，给与他们足够的信任和尊重，加以肯定和鼓励，同事之间遇到沟通上的问题时，优先在情绪上要多安抚和疏通，然后在一起讨论，带有情绪的工作都是无济于事；任务多的时候，难免大家都有意见，会先跟领导提出目前规划，遇到的问题，自己的解决办法，让领导抉择，压力大的时候，任务安排的合理性就很重要了。对上要能抗住事，不把太多压力释放到下属这层，对下要严谨认真，把事情安排妥当，规划好时间，任务拆分还要聚合任务，完成一个整体。在下属取得不错的进步后，大方的在公司群里或者领导目前多提，在项目出现问题时，自己主动来沟通接盘，安排处理解决及时上报进度和处理方案得到理解和支持。再用一些市面上比较成熟的管理工具，配以管理项目，更是事半功倍。 认同下属的工作价值，认同管理的价值，相信 1 + 1 + 1 &gt; 10的效果。 带头作用一开始的时候前端项目优化，新插件，工具，功能复杂的业务都是自己来做，把一些好的习惯，代码风格，编写格式融入具体业务中，让员工学会“偷懒”，体会简洁的代码的舒适感，编译速度提升带来的滋润，逐渐养成书写技术文档的习惯，后面从一手包办的保姆角色变成”你也可以去做”，你的想法比我的更好，甘心做一个垫脚石，在业务中把自己知道的”知识、眼界”全盘奉献出去后，来激发他们能力的释放。我深知，按部就班的管理是不会带来业务增长的，下属的好奇心、成就感才是内驱力。激发思考，思考后实践，得到收获后不言而喻的心满意足会变成内循环，不断滋润组内每一个人。在下次其他同事遇到问题，我知道，肯定有人会主动去想这怎么去弄，虽然这可能跟我工作无关。 技术和管理如何兼顾我相信自己可以写代码写到80岁的人，有点狂妄，但是却是心里所想。在管理的同时，我发现自己很多短板，在上海，工作细分化很多工作我无需关心，只要做好自己的工作也能带来很高的报酬。但是做了管理时间长了，我渐渐发现只专注于前端还不够，你需要懂整个框架，业务框架，后端架构，满足业务后呢，客户还需要什么功能呢？前端领域知识很庞杂，各种框架林林总总很多，总是要跳出来看看，业务还需要什么？技术总有优缺点，寻找更合适的技术去搞定业务，贴合需求。这些经历会让我打开自己，发现技术的海洋还如此广阔，而自己懂的还不够，不局限于某一技术栈，迫使自己站在更高视角使用技术，更深入的去了解其他成熟的技术架构，更多的选择空间让我在30岁这个焦虑的年纪多了很多信心和感动。 管理风格你想做一个什么样的领导，取决于你自己。我不知道其他人怎么看我，对公司来说，能解决问题就有价值。不管是人的问题还是事情的问题，能解决问题就是好员工。自己怎么解决问题的，很多时候都是自己看到学来的。很久前那会刚毕业，遇到非常不错的上司，交大毕业，现在研究比特币，英文名是alex xu，曾带我一段时间，很感激有一位很优秀的领导，教会我很多东西，如何挖掘用户最真实的需求，技术管理，代码怎么样算好代码，也真正做到了甘当人梯，给我很多的启蒙指导。我也希望自己有天也可以同他做一位不错的领导。 拥抱变化离开呆了十年的大上海后，发生了很多变化，再加上疫情，心态也发生了很多转变，对高性价比的生活有了新的感悟和方向。我开始关心以前不愿意看到的事情，也在慢慢在意合融入，关心并处理复杂的人事，花时间去观察形形色色的人，协调多方资源，驱动整个组织和系统来运转，这些都还在学习中…","link":"/1cd3e420554a/"},{"title":"UI自动化测试工具Puppeteer","text":"Puppeteer先献上 地址：https://github.com/puppeteer/puppeteer demo: https://try-puppeteer.appspot.com/ api: https://zhaoqize.github.io/puppeteer-api-zh_CN/ 概述通过 api 自动化控制 Chrome 如何使用要求：node &gt; v6.4.0 （如要使用 async / await，只有 Node v7.6.0 或更高版本才支持） 安装：yarn add puppeteer -S 能做什么官方回答 生成页面 PDF。 抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。 自动提交表单，进行 UI 测试，键盘输入等。 创建一个时时更新的自动化测试环境。使用最新的 JavaScript 和浏览器功能直接在最新版本的 Chrome 中执行测试。 捕获网站的 timeline trace，用来帮助分析性能问题。 测试浏览器扩展。 总结 爬虫，抓取任意网站的页面数据 ui 流程自动化测试 按业务逻辑来编写测试案例， 性能分析 通过生成 json 文件，拖到开发者工具中 performace 中查看 可以监听网站发出的请求，可以拦截，抓取响应的数据 可以设置代理服务器来访问网站 可以设置不同终端设备模拟器，通过截图来查看最终页面呈现效果 可以设置 delay sleep 来模拟真人输入和操作 可以监听 console, 接口抛出的异常，设置 cookie，键盘输入，鼠标移动 基于我们的 egg.js 可以做定时任务，定时检测；实现一套前端页面监控，便于自测 X 像 12306 登陆页面验证码过于复杂的网站，抓取数据有点困难，需要根据不同网站，个个攻破 √ api 友好，官方维护 代码示例：如何爬虫？ 1234567891011121314151617181920212223242526272829303132333435363738const puppeteer = require('puppeteer');1. 准备工作// windowconst browser = await puppeteer.launch({ headless: true, defaultViewport: { width: 1920, height: 1080, deviceScaleFactor: 1, },});// macconst browser = await puppeteer.launch({ headless: true, defaultViewport:null, executablePath: 'your chrome app path', // '/Applications/Google Chrome.app/'});const page = await browser.newPage();await browser.close();// 放在最后// 准备工作结束// 前往豆瓣网站，等待 dom 加载完成await page.goto('https://movie.douban.com/', { waitUntil: 'networkidle0' });await page.waitForSelector('.gaia-movie');// 爬虫开始const list = await page.evaluate(() =&gt; {const list = [...document.querySelectorAll(\".list-wp .slide-page[data-index='0'] a\")]; return list.map(el =&gt; { return { href: el.href.trim(), title: el.innerText.trim() }; });});consoele.log(list) ui流程： 模拟用户操作 123456789await page.goto('https://test-sat.meetsocial.cn/', { waitUntil: 'networkidle0' });// 前往某个网站await page.focus('#loginName'); // 模拟聚焦用户名输入框await page.type('#loginName', 'admin'); // 模拟用户名输入await page.type('#password', '********'); // 模拟密码输入await page.keyboard.press('Enter');// 模拟按键回车const cardBtn = await page.$('.ant-card'); // 跳转新的页面 进入/channelawait cardBtn.click(); // 点击事件await page.waitForSelector('#facebook section'); 使用trace性能分析（每个浏览器一次只能激活一个跟踪） 1234567891011121314151617await page.tracing.start({ path: './file/' + moment().format('YYYY-MM-DD-HH-mm-ssss') + '-trace.json',});await page.goto('https://test-sat.meetsocial.cn/', { waitUntil: 'networkidle0' });await page.tracing.stop(); 4. 拦截请求await page.setRequestInterception(true);page.on('request', interceptedRequest =&gt; {// console.log('interceptedRequest: ', interceptedRequest);// if (interceptedRequest.url().endsWith('.png') || interceptedRequest.url().endsWith('.jpg'))// interceptedRequest.abort();// else interceptedRequest.continue();});page.on('response', response =&gt; { console.log(response.url());}); 截图输出 1await page.screenshot({ path: './file/' + createTime + '.png', fullPage: true }); 模拟器 （手机 pad） 1await page.emulate(iPhone);","link":"/f0142a5f6230/"},{"title":"Email 排版","text":"在做项目时，发现产品对推送的邮件内容这一部分要求很高，邮件内容要很丰富，同时支持多个邮箱客户端，web 端。大家都知道，邮件内容是否正常展示，字体等完全取决于邮件客户端，大多数邮件客户端会过滤 html 设置。让你的邮件看上去 low 到炸。 问题 如何编写 HTML Email，各个终端对 html 支持度，如何大概率正常展示邮件 node 如何起服务来发送邮件 如何做比较漂亮的邮件模板 MJML https://mjml.io/提供了新语法新标签来支持响应式页面布局，简单易上手，快速实现效果，把我们从 table 的泥沼中带出来了 但是笔者也发现很多问题：比如转发邮件，内容间距变得很宽很高，。想做宽度对齐的按钮，在桌面端偶尔出现上下布局的按钮 : ( 特点： 支持内联 123456&lt;mj-style inline=\"inline\"&gt; .blue-text div { color: blue !important; }&lt;/mj-style&gt; &lt;mj-attributes&gt; &lt;mj-class&gt; carousel, table, icon, image 等 mj-spacer 不建议使用，会出现多层空隙 支持原生 dom 1234567&lt;mj-raw&gt; &lt;!-- htmlmin:ignore --&gt;{% if foo &lt; 5 %}&lt;!-- htmlmin:ignore --&gt;&lt;/mj-raw&gt; &lt;!-- Some mjml section --&gt;&lt;mj-raw&gt; {% endif %}&lt;/mj-raw&gt; 官网: https://github.com/mjmlio/mjml demo: https://mjml.io/try-it-live/templates/basic （支持在线压缩） 教程：https://documentation.mjml.io/vscode 工具: https://marketplace.visualstudio.com/items?itemName=mjmlio.vscode-mjml（支持预览，出现特殊字符会报错，没有网页版try-it-live好用）还有桌面端应用。 NodeMailerNodemailer 是一个简单易用的 Node.js 邮件发送组件 支持抄送，附件 1234567891011121314151617181920212223import mjml2html from 'mjml'/* Compile an mjml string*/const htmlOutput = mjml2html(` &lt;mjml&gt; &lt;mj-body&gt; &lt;mj-section&gt; &lt;mj-column&gt; &lt;mj-text&gt; Hello World! &lt;/mj-text&gt; &lt;/mj-column&gt; &lt;/mj-section&gt; &lt;/mj-body&gt; &lt;/mjml&gt;`, options)/* Print the responsive HTML generated and MJML errors if any*/console.log(htmlOutput) 12345678910111213141516171819202122232425262728npm install nodemailer --saveconst transporter = nodemailer.createTransport({ service: email.service, secure: true, // true for 465, false for other ports auth: { user: email.user, // 发送邮箱 pass: email.pass, // smtp授权码 }, tls: { rejectUnauthorized: false, },}); await transporter.sendMail( { from: email.user, // sender address to, subject, // Subject line text, // plain text body html: // html模板 htmlOutput , }, (error, info) =&gt; { if (error) { return console.log(error, '------------error---send-------------'); } console.log('Message sent: %s', info.messageId); }); 参考：阮一峰 http://www.ruanyifeng.com/blog/2013/06/html_email.htmlhttps://www.caniemail.com/search/?s=table","link":"/7fc1b806681b/"},{"title":"程序员如何优雅地搞副业","text":"技术最大的价值是解决问题和需求。哪里有问题和需求的存在，哪里就有技术伸展的空间，就有盈利的机会，今天想分享些自己对于技术人员业余项目的一些总结和我发现的一些机会。 对于很多程序员来说，一边领着全职工资，经历着 996，根本没多少悠闲时间用来搞搞副业。程序猿都是爱折腾的，应该有不少人跟我一样相信指尖的力量可以改变世界吧，有点时间的话总是用来做些新东西 那我们就接着看。 1.如果你在某个细分领域有一定的专业性，可以在 比如知乎上 简书上 知识星球上以尝试做自己的个人 IP，通过分享自己的课程或者专业知识来来赚取一份副业收入。 兼职外包 开源中国众包 猿急送 程序员客栈 当你看到一个生活周边普通朋友使用电脑或手机时，如果遇到的一些重复性或者技巧性的问题时，动动脑筋，他们的这些问题能不能用技术解决，如果可以的话，去尝试着做一个业余项目。举几个例子： Park.io : 一个帮助你抢 io 后缀域名的网站，每个月目前收入有 13 万美金，真的是一个人的项目哦，很不错吧。 视频音频转换器: 一款很普通的 Android App，帮助用户做视频音频的格式转换，每个月收入有 3000 美金。 Weather Extension：一款纯粹简单的浏览器天气提醒插件，每月收入有 1 万美金。 目前就我所知的最厉害的解决工具型产品案例是 http://www.youtube-mp3.org/ ，一款把 Youtube 视频转换成音频的在线工具。需求蛮奇怪的对吧，只有一个简单的页面，但是你会发现他支持几乎所有国家的语言，再细细研究会发现这个做的很丑的网站居然是 Alexa 前 500 的网站，每天 UV 和京东一个数量级。经过一番研究我发现它的逻辑其实是这样的：每次新音乐上线，发行方都会在 Youtube 放上公开的 MV，让大家试听购买，但是事实是多数用户想在 iPod 上听却不愿意花钱买，那这个网站就把 YouTube 的音乐提取出来咯，一不小心就这么流行了，每天收入可能在 1 万-10 万（可能不准确）美金级别，很厉害吧。 解决问题型的业余项目从工具出发会是个很好的开始，毕竟工具相比于内容来说，并不需要每天持续输出，只需做程序员最擅长的就好了。 另外，思路可以放宽一些，工具不要局限在 App 和 Web 上，也可以是 Wordpress 主题和插件、Chrome\\Safari\\Firefox 插件、WeChat\\Line\\iMessage 收费表情包等等，只要用户忠诚，产品好用，铁定是有用户愿意付费的。 企业内推 有资料显示 滴滴的内推奖励从 D5-D10/M4 以上职级，内推奖金从 4000 元到 60000 元不等，而针对橙心优选的平台运营部岗位“重磅加码”，奖金翻番。在脉脉职言区，网友先后匿名透露企业内推奖金：快手内推 k3 级别奖励约 10000 元，腾讯内推 p9 级别员工奖励 6000 元，字节跳动内推基础岗位大部分奖励 2000 元及以下、2-1 级别员工奖励 5000 元。 如果手上有写人脉 可以尝试看看 回报周期比较长 沟通成本也很高。留意些或许会有一笔意外收入哦","link":"/aa3c2d7f6776/"},{"title":"tabby：高颜值的终端工具","text":"今天给大家推荐一个开源的终端工具，非常漂亮，非常炫酷，当我们程序员在终端上敲命令行时，会有一种黑客的既视感，在我看来，有一个炫酷，漂亮的终端工具，更能彰显我们程序员的身份。 源码地址：https://github.com/Eugeny/tabby Tabby[1] 是一个基于 TypeScript 开发的终端模拟器，适用于 Windows，macOS 和 Linux。 功能也很强大，如下： 集成 SSH，Telnet 客户端和连接管理器 集成串行终端 定制主题和配色方案 完全可配置的快捷键和多键快捷键 拆分窗格 记住你的标签 支持 PowerShell（和 PS Core）、WSL、Git-Bash、Cygwin、MSYS2、Cmder 和 CMD 在 SSH 会话中通过 Zmodem 进行直接文件传输 完整的 Unicode 支持，包括双角字符 不会因快速的输出而卡住 Windows 上的正确 shell 体验，包括 tab 自动补全（通过 Clink） Integrated encrypted container for SSH secrets and configuration SSH、SFTP 和 Telnet 客户端可用作 Web 应用程序（也可托管） 不过，该项目目前处于 Alpha 阶段，我自己使用时也发现一些问题：比如暂时还不支持设置中文，插件数量还不够丰富等等。但总的来说，Tabby 仍是一个值得关注的项目，有需要的同学可以先尝试下。","link":"/3a18d28ae706/"},{"title":"大数据渲染解决方案一 — react-virtualized","text":"前端怎么处理大数据渲染 awak, DOM结构如果过大, 网页就会出现用户操作体验上的问题, 比如滚动, 点击等常用操作. 同时, 对react的虚拟DOM计算以及虚拟DOM反映到真实DOM的压力也会很大. 当用户点击切换按钮时, 就会出现秒级的卡顿. 解决问题核心：只加载可见区域的组件 react-virtualized是一个以高效渲染大型列表和表格数据的响应式组件 推荐：https://github.com/bvaughn/react-virtualized react-virtualized的基础组件有： Grid （推荐） List Table Masonry Collection 除此之外，还有些高阶组件。这里grid组件比较适合做网格的，做表格也是可以的，灵活度很高。list可以做排版类的长文列表。搭配 AutoSizer, InfiniteLoader, CellMeasurer, CellMeasurerCache做样式自适应，无限滚动。 比如下拉框中无限滚动加载： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115import VirtualList from 'virtual-list';&lt;Select value={value} autoFocus open={open} onBlur={() =&gt; setOpen(false)} onMouseEnter={() =&gt; setOpen(true)} style={{minWidth: 200}} dropdownRender={() =&gt; ( &lt;div onMouseDown={(e) =&gt; e.preventDefault()}&gt; &lt;div style={{minHeight: 200}}&gt; &lt;VirtualList {...val} /&gt;{' '} &lt;/div&gt; &lt;small&gt; 总数：{total} 已加载：{data.length} &lt;/small&gt; &lt;/div&gt; )}/&gt;// virtual-list 组件import React from 'react';import PropTypes from 'prop-types';import styled from 'styled-components';import {List, AutoSizer, InfiniteLoader, CellMeasurer, CellMeasurerCache} from 'react-virtualized';const RowCell = styled.div` position: relative; display: block; overflow: hidden; color: rgba(0, 0, 0, 0.65); font-weight: 400; white-space: nowrap; text-overflow: ellipsis; cursor: pointer;`;const VirtualList = (props) =&gt; { const cache = new CellMeasurerCache({ defaultHeight: 40, minHeight: 0, fixedWidth: true }); const {total, data, handleChange, handleMore, optionText} = props; function RowRenderer(opj) { const {index, key, parent, style} = opj; return ( &lt;CellMeasurer cache={cache} columnIndex={0} key={key} parent={parent} rowIndex={index}&gt; &lt;RowCell style={style} onClick={() =&gt; { handleChange({index: index, item: data[index]}); }} &gt; {optionText(data[index], index)} &lt;/RowCell&gt; &lt;/CellMeasurer&gt; ); } function handleHeight(height) { return Math.min(data.length * cache.defaultHeight + 40, height); } return ( &lt;AutoSizer style={{minHeight: 'max-content'}}&gt; {({width, height}) =&gt; { return ( &lt;InfiniteLoader isRowLoaded={({index}) =&gt; { return index &lt; data.length; }} loadMoreRows={() =&gt; handleMore()} rowCount={total} threshold={2} &gt; {({onRowsRendered, registerChild}) =&gt; { return ( &lt;List height={handleHeight(height)} onRowsRendered={onRowsRendered} ref={registerChild} rowCount={data.length} rowHeight={cache.rowHeight} deferredMeasurementCache={cache} rowRenderer={RowRenderer} width={width} /&gt; ); }} &lt;/InfiniteLoader&gt; ); }} &lt;/AutoSizer&gt; );};VirtualList.propTypes = { handleMore: PropTypes.func, handleChange: PropTypes.func, optionText: PropTypes.func, data: PropTypes.array, total: PropTypes.number};VirtualList.defaultProps = { handleMore: () =&gt; {}, handleChange: () =&gt; {}, optionText: () =&gt; {}, data: [], total: 0};export default VirtualList; demo: https://bvaughn.github.io/react-virtualized/#/components/Table 另外：可参考https://github.com/bvaughn/react-window同一个作者，体积更小，更快。demo: https://react-window.now.sh/#/examples/list/fixed-size","link":"/0fe45faebdb4/"},{"title":"嵌入式持久性数据库 —— Nedb","text":"简述 是什么？数据库。 特点： 适用于 Node.js，nw.js，Electron 和浏览器的嵌入式持久性数据库或内存数据库，JavaScript，无二进制依赖性。API 是 MongoDB 的子集，并且速度非常快。可以充当内存数据库，也可以用来实现本地存储 能干什么 ？ 消除了与客户机服务器配置相关的开销，在运行时，也只需要较少的内存开销 缺点：不宜用于处理大量数据 性能：NeDB 吞吐量 (带索引) Insert: 5950 ops Find: 25440 ops Update: 4490 ops Remove: 6620 ops 安装 https://github.com/louischatriot/nedb ❤10.7K 12345npm install nedb --save # Put latest version in your package.jsonnpm test # You'll need the dev dependencies to launch testsbower install nedb # For the browser versions, which will be in browser-version/out 开始123456const Datastore = require('nedb');const page = new Datastore({ filename: './[dbname].db', autoload: true,}); 简单教程查找： 12345db.find({}, function (err, docs) {}).sort().limit();db.findOne({ \\_id: [id] }, function (err, docs) {});db.count({id: [id]}, function (err, count) {}); 插入： 1db.insert(doc, function (err, newDoc) {}) 更新： 1db.update({ \\_id: [id] }, { $set: { replaceObj } }, { multi: true }, function (err, newDoc) {}) 删除： 123db.remove({ \\_id: [id] }, {}, function (err, numRemoved) {// numRemoved = 1}); 坑执行 update 和 remove 操作时，nedb 都会在文件末尾新增加一行相应数据，确实产生了重复的数据再去查询这个数据库时数据是正常的，没有重复，当我再次重启时，db 数据多余的数据消失。（神奇~~~~ ） 注意 NeDB 支持索引。索引可以提高查询速度以及保证字段的唯一性。索引可以用在任何字段，包括嵌套很深的字段，能用来加速基本查询以及使用 $in, $lt, $lte, $gt 和 $gte 运算符的查询 数据库会自动被压缩，可手动 区分大小写 其他数据库 lowdb https://github.com/typicode/lowdb ❤11.7K 支持 node.js 和浏览器端的使用， 和 Lodash API 一致 lokijs https://github.com/techfort/LokiJS ❤5K 支持 js 和浏览器端的使用 借鉴 http://www.alloyteam.com/2016/03/node-embedded-database-nedb/","link":"/caaf024d487a/"},{"title":"Gitpod在线IDE","text":"如今，大家陆陆续续的都在家办公了，大家有没有发现，我们平时都是先安装好开发环境，下载 node,git,nvm 等，然后 git clone 项目，提交代码，大家各自严重依赖自己的本地开发环境。现在就有这一款这个工具，可以在浏览器上编辑推送代码，不用自己安装前端环境，随用随走。 在线办公，我相信这个是未来的趋势。 与传统的云和桌面 IDE 不同，Gitpod 能够理解环境并自动准备 IDE。 从官网介绍，Gitpod 是一个基于 Chorom Cloud 平台的在线 IDE，它可以快速的启动一个基于大多数流行语言的开发环境，并且可以很顺畅的进行开发。 如果你已经非常熟练使用 VS Code 进行开发的话，那么使用 Gitpod 将会无比的简单，因为从书写规范来说，这仅仅是 VS Code 的插件化扩展。 下面看一看如何使用 gitpod。 首先需要通过 OAuth 在 Github 授权 Gitpod 访问你的 Github 账号。 对于任何一个 Github 项目，只需要在前面添加： 1https://gitpod.io# 也可以安装插件 1https://chrome.google.com/webstore/detail/gitpod-always-ready-to-co/dodmmooeoklaejobgleioelladacbeki 就可以在 gitpod 中打开我的项目。 Gitpod 是一款开源产品，所以是完全可以在组织内部进行私有化部署服务的，这样就可以在私有代码仓库中使用上这款工具。 因为 Gitpod 是基于 VS Code、Docker 和 Kubernetes 等 OSS 技术，所以它熟悉、全面、可扩展且易于使用，但是也存在某些问题，基于浏览器，是不是内存和网络必然也是限制。大家可以说说你的看法。","link":"/6d12e01e8e04/"},{"title":"如何免费快速搭建一个在线购物商城","text":"我们都知道，全球有四分之一的网站是使用 WordPress 搭建的。用PHP编写并使用 MySQL 数据库的开源网站创建平台，它可能是当今最简单，功能最强大的博客和网站内容管理系统（CMS） 在本文中，如何使用WooCommerce和WordPress进行搭建购物商城。 全程不超过半小时。 零开发基础 环境 windows 10 XAMPP WordPress 下载WordPress https://cn.wordpress.org/download/ 下载XAMPP https://www.apachefriends.org/zh_cn/index.html 安装XAMPP双击安装XAMPP一直下一步，完成后，将wordpress-6.1.1-zh_CN解压重命名wordpress，放置xampp\\htdocs文件夹内 启动WordPress点击【start】,启动 Apache 和 MySQL 点击 MySQL 的 “Admin” 选项，打开 phpMyAdmin，新建数据库 wp 安装WordPress浏览器打开 http://localhost/wordpress 配置WordPress有过万种免费的主题(网站样本)给你用。只要你去外观 (Appearance)及点击主题 (Themes)来搜索就可以安装你想要的主题。我们这里只需要2个插件满足基本需求了。 安装插件WooCommerce 安装主题Joyas Shop 添加商品，编辑店铺 你可以添加产品，装饰店铺，添加支付方式，物流组件，单个商品页编辑等等。 推荐插件 Payment gateways – 这些扩展组件可以接受更多的付款方式。通常，接受的付款方式（支付网关）越多越好。 WooCommerce Subscriptions – 让客户订阅你的商品或服务，并按每周、每月或年费的方式支付 Wordfence Security – 很强大的安全软件，能够扫描网站文件，发现安全隐患并给出设置建议，具有防火墙，防爆破等功能 Autoptimize – 压缩JS文件，减少请求数和文件体积，优化传输速度 完成除此以外，您还可以搭建一个博客网站，企业pages，设计师同学可以做一个作品集网站，论坛网站，视频学习网站等等，期待您的发现。","link":"/1325858d7087/"}],"tags":[{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"webapck","slug":"webapck","link":"/tags/webapck/"},{"name":"uniapp","slug":"uniapp","link":"/tags/uniapp/"},{"name":"应用","slug":"应用","link":"/tags/%E5%BA%94%E7%94%A8/"},{"name":"app","slug":"app","link":"/tags/app/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"翻译","slug":"翻译","link":"/tags/%E7%BF%BB%E8%AF%91/"},{"name":"小程序","slug":"小程序","link":"/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"微信小程序","slug":"微信小程序","link":"/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"读书","slug":"读书","link":"/tags/%E8%AF%BB%E4%B9%A6/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"NodeJs","slug":"NodeJs","link":"/tags/NodeJs/"},{"name":"微信开发","slug":"微信开发","link":"/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"},{"name":"eggJs","slug":"eggJs","link":"/tags/eggJs/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"小程序开发","slug":"小程序开发","link":"/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"},{"name":"flutter","slug":"flutter","link":"/tags/flutter/"},{"name":"webpack","slug":"webpack","link":"/tags/webpack/"},{"name":"babel","slug":"babel","link":"/tags/babel/"},{"name":"前端优化","slug":"前端优化","link":"/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"vue-cli","slug":"vue-cli","link":"/tags/vue-cli/"},{"name":"DevOps","slug":"DevOps","link":"/tags/DevOps/"},{"name":"运维","slug":"运维","link":"/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Jenkins","slug":"Jenkins","link":"/tags/Jenkins/"},{"name":"前端工程化","slug":"前端工程化","link":"/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"},{"name":"管理","slug":"管理","link":"/tags/%E7%AE%A1%E7%90%86/"},{"name":"技术团队","slug":"技术团队","link":"/tags/%E6%8A%80%E6%9C%AF%E5%9B%A2%E9%98%9F/"},{"name":"领导力","slug":"领导力","link":"/tags/%E9%A2%86%E5%AF%BC%E5%8A%9B/"},{"name":"Puppeteer","slug":"Puppeteer","link":"/tags/Puppeteer/"},{"name":"UI自动化测试工具","slug":"UI自动化测试工具","link":"/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"name":"副业","slug":"副业","link":"/tags/%E5%89%AF%E4%B8%9A/"},{"name":"react","slug":"react","link":"/tags/react/"}],"categories":[{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"},{"name":"uniapp","slug":"uniapp","link":"/categories/uniapp/"},{"name":"翻译","slug":"翻译","link":"/categories/%E7%BF%BB%E8%AF%91/"},{"name":"book","slug":"book","link":"/categories/book/"},{"name":"software","slug":"software","link":"/categories/software/"},{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"微信开发","slug":"微信开发","link":"/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"},{"name":"git","slug":"git","link":"/categories/git/"},{"name":"flutter","slug":"flutter","link":"/categories/flutter/"},{"name":"vue","slug":"vue","link":"/categories/vue/"},{"name":"webpack","slug":"webpack","link":"/categories/webpack/"},{"name":"npm","slug":"npm","link":"/categories/npm/"},{"name":"eggJs","slug":"eggJs","link":"/categories/eggJs/"},{"name":"技术管理","slug":"技术管理","link":"/categories/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"},{"name":"前端工程化","slug":"前端工程化","link":"/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"},{"name":"工具, 自动化测试","slug":"工具-自动化测试","link":"/categories/%E5%B7%A5%E5%85%B7-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"},{"name":"副业","slug":"副业","link":"/categories/%E5%89%AF%E4%B8%9A/"},{"name":"react","slug":"react","link":"/categories/react/"}]}